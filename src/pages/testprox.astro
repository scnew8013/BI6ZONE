<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>1346.lol - Web Proxy Terminal</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            background: #000;
            color: #00ff00;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }

        .terminal-window {
            width: 90%;
            max-width: 800px;
            height: 500px;
            background: #1a1a1a;
            border-radius: 8px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            overflow: hidden;
        }

        .terminal-header {
            background: #2d2d2d;
            height: 30px;
            display: flex;
            align-items: center;
            padding: 0 15px;
            border-bottom: 1px solid #333;
        }

        .traffic-lights {
            display: flex;
            gap: 8px;
        }

        .light {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .red { background: #ff5f57; }
        .yellow { background: #ffbd2e; }
        .green { background: #28ca42; }

        .window-title {
            flex: 1;
            text-align: center;
            color: #999;
            font-size: 13px;
        }

        .terminal-body {
            padding: 20px;
            height: calc(100% - 30px);
            overflow-y: auto;
            background: #000;
        }

        .terminal-line {
            margin-bottom: 8px;
            font-size: 14px;
            line-height: 1.4;
        }

        .prompt {
            display: flex;
            align-items: center;
            margin-top: 20px;
        }

        .prompt-symbol {
            color: #00ff00;
            margin-right: 8px;
        }

        .input-container {
            flex: 1;
            position: relative;
        }

        #command-input {
            background: transparent;
            border: none;
            color: #00ff00;
            font-family: inherit;
            font-size: 14px;
            outline: none;
            width: 100%;
        }

        .cursor {
            display: inline-block;
            width: 8px;
            height: 16px;
            background: #00ff00;
            animation: blink 1s infinite;
            margin-left: 2px;
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }

        .help-text {
            color: #888;
            font-size: 12px;
            margin-top: 20px;
        }

        .error {
            color: #ff4444;
        }

        .success {
            color: #44ff44;
        }

        .info {
            color: #4444ff;
        }

        .hidden {
            display: none;
        }

        .proxy-frame {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
            background: white;
            z-index: 1000;
        }

        .proxy-controls {
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 1001;
            background: rgba(0, 0, 0, 0.8);
            padding: 10px;
            border-radius: 5px;
        }

        .proxy-controls button {
            background: #ff4444;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
            font-family: inherit;
        }
    </style>
</head>
<body>
    <div class="terminal-window" id="terminal">
        <div class="terminal-header">
            <div class="traffic-lights">
                <div class="light red"></div>
                <div class="light yellow"></div>
                <div class="light green"></div>
            </div>
            <div class="window-title">1346.lol</div>
        </div>
        <div class="terminal-body">
            <div class="terminal-line">Initializing all services...</div>
            <div class="terminal-line">Type 'help' for all commands.</div>
            <div class="terminal-line">Press 'ctrl + l' to show/hide terminal.</div>
            <div class="terminal-line">Ready for search term or command.</div>
            
            <div class="prompt">
                <span class="prompt-symbol">➜ ~</span>
                <div class="input-container">
                    <input type="text" id="command-input" placeholder="enter query" autocomplete="off">
                    <span class="cursor"></span>
                </div>
            </div>

            <div class="help-text">
                <div>Available commands:</div>
                <div>• help - Show this help message</div>
                <div>• clear - Clear terminal</div>
                <div>• proxy [url] - Access website through proxy</div>
                <div>• exit - Close proxy view</div>
                <div>• about - About this service</div>
            </div>
        </div>
    </div>

    <script>
        const input = document.getElementById('command-input');
        const terminalBody = document.querySelector('.terminal-body');
        const terminal = document.getElementById('terminal');
        let commandHistory = [];
        let historyIndex = -1;
        let currentBaseUrl = '';

        // Focus input on load
        window.addEventListener('load', () => {
            input.focus();
        });

        // Keep input focused
        document.addEventListener('click', () => {
            input.focus();
        });

        // Handle keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'l') {
                e.preventDefault();
                toggleTerminal();
            }
            
            if (e.key === 'ArrowUp') {
                e.preventDefault();
                navigateHistory(-1);
            }
            
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                navigateHistory(1);
            }
        });

        // Handle command input
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                const command = input.value.trim();
                if (command) {
                    executeCommand(command);
                    commandHistory.unshift(command);
                    historyIndex = -1;
                }
                input.value = '';
            }
        });

        function navigateHistory(direction) {
            if (commandHistory.length === 0) return;
            
            historyIndex += direction;
            if (historyIndex < -1) historyIndex = -1;
            if (historyIndex >= commandHistory.length) historyIndex = commandHistory.length - 1;
            
            if (historyIndex === -1) {
                input.value = '';
            } else {
                input.value = commandHistory[historyIndex];
            }
        }

        function addTerminalLine(text, className = '') {
            const line = document.createElement('div');
            line.className = `terminal-line ${className}`;
            line.textContent = text;
            
            const prompt = document.querySelector('.prompt');
            terminalBody.insertBefore(line, prompt);
            terminalBody.scrollTop = terminalBody.scrollHeight;
        }

        function executeCommand(command) {
            // Show the command that was entered
            addTerminalLine(`➜ ~ ${command}`);

            const parts = command.split(' ');
            const cmd = parts[0].toLowerCase();
            const args = parts.slice(1);

            switch (cmd) {
                case 'help':
                    showHelp();
                    break;
                case 'clear':
                    clearTerminal();
                    break;
                case 'proxy':
                    if (args.length > 0) {
                        proxyUrl(args.join(' '));
                    } else {
                        addTerminalLine('Usage: proxy [url]', 'error');
                        addTerminalLine('Example: proxy google.com', 'info');
                    }
                    break;
                case 'exit':
                    closeProxy();
                    break;
                case 'about':
                    showAbout();
                    break;
                default:
                    if (command.includes('.') && !command.includes(' ')) {
                        // Assume it's a URL
                        proxyUrl(command);
                    } else {
                        addTerminalLine(`Command not found: ${cmd}`, 'error');
                        addTerminalLine('Type "help" for available commands.', 'info');
                    }
            }
        }

        function showHelp() {
            addTerminalLine('Available commands:', 'success');
            addTerminalLine('  help          - Show this help message');
            addTerminalLine('  clear         - Clear terminal');
            addTerminalLine('  proxy [url]   - Access website through proxy');
            addTerminalLine('  exit          - Close proxy view');
            addTerminalLine('  about         - About this service');
            addTerminalLine('');
            addTerminalLine('You can also enter URLs directly (e.g., google.com)', 'info');
        }

        function clearTerminal() {
            const lines = terminalBody.querySelectorAll('.terminal-line:not(.help-text *)');
            lines.forEach(line => {
                if (!line.closest('.help-text')) {
                    line.remove();
                }
            });
        }

        function proxyUrl(url) {
            // Add protocol if missing
            if (!url.startsWith('http://') && !url.startsWith('https://')) {
                url = 'https://' + url;
            }

            try {
                new URL(url); // Validate URL
                addTerminalLine(`Connecting to ${url}...`, 'info');
                addTerminalLine('Loading proxy view...', 'success');
                
                // Create proxy iframe
                setTimeout(() => {
                    createProxyView(url);
                }, 1000);
                
            } catch (e) {
                addTerminalLine('Invalid URL format', 'error');
                addTerminalLine('Example: proxy google.com', 'info');
            }
        }

        function createProxyView(url) {
            addTerminalLine(`Establishing proxy connection to ${url}...`, 'info');
            
            const proxyFrame = document.createElement('iframe');
            proxyFrame.className = 'proxy-frame';
            
            const proxyServices = [
                // Working CORS proxies that handle modern websites
                `https://cors.bridged.cc/${url}`,
                `https://yacdn.org/proxy/${url}`,
                `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(url)}`,
                `https://crossorigin.me/${url}`,
                // Alternative approaches
                `https://translate.google.com/translate?sl=auto&tl=en&u=${encodeURIComponent(url)}`,
                `https://proxy.cors.sh/${url}`,
                // Direct access as final fallback
                url
            ];
            
            let currentProxyIndex = 0;
            
            async function tryProxyWithFetch(proxyUrl, isDirectUrl = false) {
                try {
                    addTerminalLine(`Testing proxy service ${currentProxyIndex + 1}...`, 'info');
                    
                    if (isDirectUrl) {
                        // For direct URLs, just load in iframe
                        proxyFrame.src = proxyUrl;
                        return true;
                    }
                    
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
                    
                    const response = await fetch(proxyUrl, {
                        signal: controller.signal,
                        headers: {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                        }
                    });
                    
                    clearTimeout(timeoutId);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    
                    if (proxyUrl.includes('translate.google.com') || proxyUrl.includes('cors.bridged.cc')) {
                        proxyFrame.src = proxyUrl;
                        return true;
                    }
                    
                    const content = await response.text();
                    
                    if (!content || content.length < 100) {
                        throw new Error('Empty or invalid response');
                    }
                    
                    const baseUrl = new URL(url);
                    const rewrittenContent = content
                        .replace(/href="\/([^"]*?)"/g, `href="${baseUrl.origin}/$1"`)
                        .replace(/src="\/([^"]*?)"/g, `src="${baseUrl.origin}/$1"`)
                        .replace(/action="\/([^"]*?)"/g, `action="${baseUrl.origin}/$1"`)
                        .replace(/url$$\/([^)]*?)$$/g, `url(${baseUrl.origin}/$1)`);
                    
                    // Inject content into iframe
                    proxyFrame.srcdoc = rewrittenContent;
                    
                    proxyFrame.onload = () => {
                        try {
                            const iframeDoc = proxyFrame.contentDocument || proxyFrame.contentWindow.document;
                            
                            // Intercept all clicks and forms
                            iframeDoc.addEventListener('click', (e) => {
                                const link = e.target.closest('a');
                                if (link && link.href) {
                                    e.preventDefault();
                                    const newUrl = link.href;
                                    addTerminalLine(`Navigating to: ${newUrl}`, 'info');
                                    createProxyView(newUrl);
                                }
                            });
                            
                            // Intercept form submissions
                            iframeDoc.addEventListener('submit', (e) => {
                                e.preventDefault();
                                const form = e.target;
                                const formData = new FormData(form);
                                const actionUrl = form.action || url;
                                addTerminalLine(`Form submitted to: ${actionUrl}`, 'info');
                                // Handle form submission through proxy
                            });
                            
                        } catch (err) {
                            console.log('[v0] Cross-origin iframe access blocked:', err);
                        }
                    };
                    
                    return true;
                } catch (error) {
                    console.log('[v0] Proxy fetch failed:', error);
                    addTerminalLine(`Service ${currentProxyIndex + 1} failed: ${error.message}`, 'error');
                    return false;
                }
            }
            
            async function tryNextProxy() {
                if (currentProxyIndex >= proxyServices.length) {
                    addTerminalLine('All proxy services failed or are blocked.', 'error');
                    addTerminalLine('Your network may be blocking proxy services.', 'error');
                    addTerminalLine('Try the Direct button to open in a new window.', 'info');
                    closeProxy();
                    return;
                }
                
                const proxyUrl = proxyServices[currentProxyIndex];
                const isDirectUrl = currentProxyIndex === proxyServices.length - 1;
                
                addTerminalLine(`Trying proxy service ${currentProxyIndex + 1}/${proxyServices.length}...`, 'info');
                
                const success = await tryProxyWithFetch(proxyUrl, isDirectUrl);
                
                if (success) {
                    addTerminalLine('Proxy connection established successfully.', 'success');
                    
                    // Update method indicator
                    const methodDiv = proxyControls.querySelector('div:last-child');
                    if (methodDiv) {
                        const methods = ['CORS Bridged', 'YaCDN Proxy', 'CodeTabs', 'CrossOrigin.me', 'Google Translate', 'CORS.sh', 'Direct'];
                        methodDiv.textContent = `Method: ${methods[currentProxyIndex]}`;
                    }
                } else {
                    currentProxyIndex++;
                    setTimeout(tryNextProxy, 2000); // Increased delay between attempts
                }
            }

            const proxyControls = document.createElement('div');
            proxyControls.className = 'proxy-controls';
            proxyControls.innerHTML = `
                <button onclick="closeProxy()" style="background: #ff4444;">✕ Close Proxy</button>
                <button onclick="refreshProxy('${url}')" style="background: #4444ff; margin-left: 10px;">🔄 Refresh</button>
                <button onclick="openDirect('${url}')" style="background: #44ff44; margin-left: 10px;">🔗 Direct</button>
                <button onclick="tryAdvancedProxy('${url}')" style="background: #ff8800; margin-left: 10px;">⚡ Advanced</button>
                <div style="color: #00ff00; font-size: 12px; margin-top: 5px;">
                    Proxying: ${url}
                </div>
                <div style="color: #888; font-size: 10px;">
                    Method: Loading...
                </div>
            `;
            
            // Hide terminal and show proxy
            terminal.classList.add('hidden');
            document.body.appendChild(proxyFrame);
            document.body.appendChild(proxyControls);
            
            // Start trying proxies
            tryNextProxy();
        }

        function openDirect(url) {
            addTerminalLine('Opening direct access...', 'info');
            window.open(url, '_blank', 'width=1200,height=800,scrollbars=yes,resizable=yes');
        }

        window.addEventListener('message', function(event) {
            if (event.data && event.data.type === 'navigate') {
                addTerminalLine(`Internal navigation to: ${event.data.url}`, 'info');
                const proxyFrame = document.querySelector('.proxy-frame');
                if (proxyFrame && currentBaseUrl) {
                    proxyFrame.src = currentBaseUrl + event.data.url;
                }
            }
        });

        function refreshProxy(url) {
            closeProxy();
            setTimeout(() => {
                proxyUrl(url);
            }, 500);
        }

        function closeProxy() {
            const proxyFrame = document.querySelector('.proxy-frame');
            const proxyControls = document.querySelector('.proxy-controls');
            
            if (proxyFrame) {
                proxyFrame.remove();
            }
            if (proxyControls) {
                proxyControls.remove();
            }
            
            terminal.classList.remove('hidden');
            addTerminalLine('Proxy connection terminated.', 'success');
            addTerminalLine('Returned to terminal interface.', 'info');
            input.focus();
        }

        function toggleTerminal() {
            terminal.classList.toggle('hidden');
            if (!terminal.classList.contains('hidden')) {
                input.focus();
            }
        }

        function showAbout() {
            addTerminalLine('1346.lol Web Proxy Terminal', 'success');
            addTerminalLine('Version 2.0.0');
            addTerminalLine('');
            addTerminalLine('A functional terminal-style web proxy interface.');
            addTerminalLine('Enter URLs to browse websites through our proxy service.');
            addTerminalLine('');
            addTerminalLine('Features:', 'info');
            addTerminalLine('• Full website proxying with CORS bypass');
            addTerminalLine('• Terminal-style command interface');
            addTerminalLine('• Command history navigation');
            addTerminalLine('• Keyboard shortcuts (Ctrl+L)');
        }

        // Simulate typing effect on load
        window.addEventListener('load', () => {
            setTimeout(() => {
                input.focus();
            }, 500);
        });

        function tryAdvancedProxy(url) {
            addTerminalLine('Attempting advanced proxy techniques...', 'info');
            closeProxy();
            
            // Use multiple advanced techniques
            const advancedMethods = [
                // Use different user agents and headers
                `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`,
                // Try mobile versions which are often less restricted
                `https://api.allorigins.win/raw?url=${encodeURIComponent(url.replace('www.', 'm.'))}`,
                // Use archive.today for recent snapshots
                `https://archive.today/newest/${url}`,
                // Try different subdomains
                `https://api.allorigins.win/raw?url=${encodeURIComponent(url.replace('https://', 'https://www.'))}`
            ];
            
            setTimeout(() => {
                const randomMethod = advancedMethods[Math.floor(Math.random() * advancedMethods.length)];
                createProxyView(randomMethod);
            }, 1000);
        }

        function tryBypass(url) {
            addTerminalLine('Attempting bypass methods...', 'info');
            tryAdvancedProxy(url);
        }
    </script>
</body>
</html>
 
