<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pixel Haven - Multiplayer RPG</title>
    <style>
        /* Gaming Theme Styles */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Courier New', monospace;
            background: linear-gradient(135deg, hsl(220, 13%, 8%), hsl(220, 13%, 12%));
            color: hsl(120, 100%, 85%);
            overflow: hidden;
            height: 100vh;
        }

        .game-container {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            position: relative;
        }

        .game-canvas {
            border: 2px solid hsl(120, 100%, 30%);
            border-radius: 8px;
            box-shadow: 0 0 20px hsl(120, 100%, 50%, 0.5);
            cursor: crosshair;
        }

        .game-ui {
            position: fixed;
            background: hsl(220, 13%, 10%);
            border: 1px solid hsl(120, 100%, 30%);
            border-radius: 8px;
            padding: 16px;
            box-shadow: 0 0 20px hsl(120, 100%, 50%, 0.5);
        }

        .player-stats {
            top: 16px;
            left: 16px;
            min-width: 280px;
        }

        .minimap-panel {
            top: 16px;
            right: 16px;
            max-width: 200px;
            text-align: center;
        }

        .chat-panel {
            bottom: 16px;
            left: 16px;
            width: 280px;
            height: 160px;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
        }

        .chat-panel.expanded {
            height: 350px;
            width: 400px;
        }

        .controls-panel {
            bottom: 16px;
            right: 16px;
            max-width: 300px;
        }

        .neon-text {
            color: hsl(120, 100%, 50%);
            text-shadow: 0 0 10px hsl(120, 100%, 50%, 0.8);
        }

        .health-bar, .mana-bar {
            height: 12px;
            border-radius: 6px;
            transition: width 0.3s ease;
        }

        .health-bar {
            background: hsl(0, 100%, 60%);
            box-shadow: 0 0 10px hsl(0, 100%, 60%, 0.7);
        }

        .mana-bar {
            background: hsl(240, 100%, 60%);
            box-shadow: 0 0 10px hsl(240, 100%, 60%, 0.7);
        }

        .bar-background {
            background: hsl(220, 13%, 15%);
            border-radius: 6px;
            overflow: hidden;
        }

        input, button {
            background: hsl(220, 13%, 15%);
            border: 1px solid hsl(120, 100%, 30%);
            color: hsl(120, 100%, 85%);
            padding: 8px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }

        button {
            cursor: pointer;
            transition: all 0.3s ease;
        }

        button:hover {
            background: hsl(120, 100%, 20%);
            box-shadow: 0 0 10px hsl(120, 100%, 50%, 0.3);
        }

        .character-select {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: hsl(220, 13%, 10%);
            border: 2px solid hsl(120, 100%, 30%);
            border-radius: 12px;
            padding: 32px;
            box-shadow: 0 0 30px hsl(120, 100%, 50%, 0.5);
            text-align: center;
            min-width: 400px;
        }

        .class-selection {
            display: flex;
            gap: 16px;
            margin: 20px 0;
            justify-content: center;
        }

        .class-button {
            padding: 16px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 100px;
        }

        .class-button:hover, .class-button.selected {
            background: hsl(120, 100%, 20%);
            box-shadow: 0 0 15px hsl(120, 100%, 50%, 0.5);
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 8px;
            background: hsl(220, 13%, 8%);
            border-radius: 4px;
            margin-bottom: 8px;
            max-height: 80px;
        }

        .chat-panel.expanded .chat-messages {
            max-height: 250px;
        }

        .circular-minimap {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            border: 2px solid hsl(120, 100%, 30%);
            background: hsl(220, 13%, 8%);
            position: relative;
            margin: 0 auto 12px auto;
            box-shadow: 0 0 20px hsl(120, 100%, 50%, 0.3);
        }

        .minimap-player {
            position: absolute;
            width: 3px;
            height: 3px;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            z-index: 10;
        }

        .minimap-terrain {
            position: absolute;
            border-radius: 1px;
        }

        .chat-expand-btn, .close-controls-btn {
            background: none;
            border: none;
            color: hsl(120, 100%, 50%);
            font-size: 14px;
            cursor: pointer;
            margin-left: auto;
            padding: 0;
        }

        .chat-expand-btn:hover, .close-controls-btn:hover {
            color: hsl(120, 100%, 70%);
        }

        .xp-bar {
            height: 8px;
            border-radius: 4px;
            transition: width 0.3s ease;
            background: hsl(280, 100%, 60%);
            box-shadow: 0 0 10px hsl(280, 100%, 60%, 0.7);
        }

        .message {
            font-size: 12px;
            margin-bottom: 4px;
        }

        .message .username {
            color: hsl(120, 100%, 50%);
            font-weight: bold;
        }

        .chat-input-container {
            display: flex;
            gap: 8px;
        }

        .chat-input {
            flex: 1;
        }

        .player-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px;
            margin-bottom: 4px;
            border-radius: 4px;
        }

        .current-player {
            background: hsl(120, 100%, 20%, 0.3);
            border: 1px solid hsl(120, 100%, 30%);
        }

        .other-player {
            background: hsl(220, 13%, 8%, 0.5);
        }

        .player-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .current-player .player-dot {
            animation: pulse 2s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .hidden {
            display: none;
        }

        .interaction-dialog {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: hsl(220, 13%, 10%);
            border: 2px solid hsl(120, 100%, 30%);
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 0 30px hsl(120, 100%, 50%, 0.5);
            min-width: 400px;
            max-width: 500px;
            z-index: 1000;
        }

        .shop-items {
            max-height: 300px;
            overflow-y: auto;
            margin: 16px 0;
        }

        .shop-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            margin-bottom: 8px;
            background: hsl(220, 13%, 8%);
            border-radius: 4px;
            border: 1px solid hsl(120, 100%, 20%);
        }

        .shop-item:hover {
            background: hsl(120, 100%, 15%);
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            z-index: 999;
        }

        .controls-text {
            font-size: 12px;
            color: hsl(120, 20%, 65%);
            line-height: 1.4;
        }

        .stat-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 12px;
        }

        .gold-amount {
            color: hsl(60, 100%, 50%);
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <canvas id="gameCanvas" class="game-canvas" width="1200" height="800"></canvas>
    </div>

    <!-- Character Selection -->
    <div id="characterSelect" class="character-select">
        <h1 class="neon-text" style="margin-bottom: 24px;">Welcome to Pixel Haven</h1>
        <p style="margin-bottom: 20px;">Enter your name and choose your class:</p>
        
        <input type="text" id="playerName" placeholder="Enter your name..." style="width: 100%; margin-bottom: 20px;">
        
        <div class="class-selection">
            <div class="class-button" data-class="warrior">
                <div style="font-size: 24px;">⚔</div>
                <div>Warrior</div>
                <div style="font-size: 10px;">High HP, Low MP</div>
            </div>
            <div class="class-button" data-class="mage">
                <div style="font-size: 24px;">✦</div>
                <div>Mage</div>
                <div style="font-size: 10px;">Low HP, High MP</div>
            </div>
            <div class="class-button" data-class="archer">
                <div style="font-size: 24px;">➵</div>
                <div>Archer</div>
                <div style="font-size: 10px;">Balanced Stats</div>
            </div>
        </div>
        
        <button id="startGame" style="width: 100%; margin-top: 20px;">Start Adventure</button>
    </div>

    <!-- Player Stats Panel -->
    <div id="playerStats" class="game-ui player-stats hidden">
        <div style="text-align: center; margin-bottom: 16px;">
            <h3 class="neon-text" id="playerNameDisplay"></h3>
            <p style="font-size: 12px; color: hsl(120, 20%, 65%);" id="playerClassDisplay"></p>
        </div>
        
        <div>
            <div class="stat-row">
                <span>HP</span>
                <span id="healthDisplay"></span>
            </div>
            <div class="bar-background" style="margin-bottom: 12px;">
                <div id="healthBar" class="health-bar" style="width: 100%;"></div>
            </div>

            <div class="stat-row">
                <span>MP</span>
                <span id="manaDisplay"></span>
            </div>
            <div class="bar-background" style="margin-bottom: 12px;">
                <div id="manaBar" class="mana-bar" style="width: 100%;"></div>
            </div>

            <div class="stat-row">
                <span>XP</span>
                <span id="xpDisplay">0/100</span>
            </div>
            <div class="bar-background" style="margin-bottom: 12px;">
                <div id="xpBar" class="xp-bar" style="width: 0%;"></div>
            </div>

            <div class="stat-row">
                <span>Gold:</span>
                <span id="goldDisplay" class="gold-amount"></span>
            </div>
        </div>
    </div>

    <!-- Minimap Panel -->
    <div id="minimapPanel" class="game-ui minimap-panel hidden">
        <div id="minimap" class="circular-minimap"></div>
        <p class="neon-text" style="font-size: 12px;">Online Players (<span id="playerCount">0</span>)</p>
    </div>

    <!-- Chat Panel -->
    <div id="chatPanel" class="game-ui chat-panel hidden">
        <div style="display: flex; align-items: center; margin-bottom: 12px;">
            <h3 class="neon-text" style="margin: 0;">Chat</h3>
            <button id="chatExpandBtn" class="chat-expand-btn">⇱</button>
        </div>
        <div id="chatMessages" class="chat-messages"></div>
        <div class="chat-input-container">
            <input type="text" id="chatInput" class="chat-input" placeholder="Type a message...">
            <button id="sendButton">Send</button>
        </div>
    </div>

    <!-- Controls Panel -->
    <div id="controlsPanel" class="game-ui controls-panel hidden">
        <div style="display: flex; align-items: center; margin-bottom: 12px;">
            <h3 class="neon-text" style="margin: 0;">Controls</h3>
            <button id="closeControlsBtn" class="close-controls-btn">✕</button>
        </div>
        <div class="controls-text">
            <div>🎮 <strong>WASD</strong> or <strong>Arrow Keys</strong> - Move</div>
            <div>⚡ <strong>E</strong> or <strong>Space</strong> - Interact with NPCs</div>
            <div>💬 <strong>Enter</strong> - Send chat message</div>
            <div>🌟 Walk near NPCs to interact with them</div>
        </div>
    </div>

    <!-- Interaction Dialog -->
    <div id="interactionOverlay" class="overlay hidden"></div>
    <div id="interactionDialog" class="interaction-dialog hidden">
        <h3 class="neon-text" id="npcName"></h3>
        <p id="npcDialogue" style="margin: 16px 0;"></p>
        <div id="shopItems" class="shop-items hidden"></div>
        <div style="text-align: right; margin-top: 16px;">
            <button id="closeDialog">Close</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script>
        // Supabase Configuration
        const SUPABASE_URL = "https://yxtihsvpirmpmrffdbnt.supabase.co";
        const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl4dGloc3ZwaXJtcG1yZmZkYm50Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1MzUwMjAsImV4cCI6MjA3MDExMTAyMH0.0edpLL1XlfmyTEYfqyGnaUt0kMBcwwnjt0XlORrHRwQ";
        
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // Game Constants
        const TILE_SIZE = 32;
        const MOVE_SPEED = 120;
        const UPDATE_INTERVAL = 50;
        const WORLD_WIDTH = 2000;  // MASSIVE OPEN WORLD - 20x bigger than before
        const WORLD_HEIGHT = 1500;  // GIGANTIC MAP for endless exploration

        // Game State
        let gameState = {
            players: {},
            messages: [],
            currentPlayer: null,
            isConnected: false,
            keys: {},
            animationFrame: 0,
            lastUpdate: Date.now(),
            interactionTarget: null
        };

        // World Data
        const TILES = {
            grass: { id: 'grass', type: 'grass', walkable: true, color: '#10b981' },
            stone: { id: 'stone', type: 'stone', walkable: true, color: '#64748b' },
            water: { id: 'water', type: 'water', walkable: false, color: '#3b82f6' },
            dirt: { id: 'dirt', type: 'dirt', walkable: true, color: '#a3540f' },
            wood: { id: 'wood', type: 'wood', walkable: false, color: '#92400e' },
            roof: { id: 'roof', type: 'roof', walkable: false, color: '#7c2d12' },
            door: { id: 'door', type: 'door', walkable: true, color: '#fbbf24' },
            wall: { id: 'wall', type: 'wall', walkable: false, color: '#525252' },
            floor: { id: 'floor', type: 'floor', walkable: true, color: '#d6d3d1' }
        };

        const BUILDINGS = [
            // === CENTRAL TOWN (COMPACT CAPITAL CITY) ===
            // Commercial District - Main Street (Shops lined up)
            { id: 'central-weapon-shop', name: 'Iron & Steel Armory', type: 'shop', x: 980, y: 720, width: 4, height: 3, entrance: { x: 982, y: 723 }, icon: '⚔️', description: 'Weapon emporium' },
            { id: 'central-weapon-shop-2', name: 'Royal Weapons Gallery', type: 'shop', x: 985, y: 720, width: 4, height: 3, entrance: { x: 987, y: 723 }, icon: '⚔️', description: 'Elite weapons' },
            { id: 'central-potion-shop', name: 'Mystic Potions Emporium', type: 'shop', x: 990, y: 720, width: 4, height: 3, entrance: { x: 992, y: 723 }, icon: '🧪', description: 'Alchemical shop' },
            { id: 'central-food-shop', name: 'Grand Bakery', type: 'shop', x: 995, y: 720, width: 4, height: 3, entrance: { x: 997, y: 723 }, icon: '🥖', description: 'Fresh bread daily' },
            { id: 'central-jewelry', name: 'Golden Treasures', type: 'shop', x: 1000, y: 720, width: 4, height: 3, entrance: { x: 1002, y: 723 }, icon: '💍', description: 'Fine jewelry' },
            { id: 'central-magic-shop', name: 'Arcane Emporium', type: 'shop', x: 1005, y: 720, width: 4, height: 3, entrance: { x: 1007, y: 723 }, icon: '🔮', description: 'Magical items' },

            // Commercial District - Side Street
            { id: 'central-book-shop', name: 'Scholar\'s Corner', type: 'shop', x: 980, y: 724, width: 4, height: 3, entrance: { x: 982, y: 727 }, icon: '📖', description: 'Ancient tomes' },
            { id: 'central-herb-shop', name: 'Garden of Herbs', type: 'shop', x: 985, y: 724, width: 4, height: 3, entrance: { x: 987, y: 727 }, icon: '🌿', description: 'Herbal remedies' },
            { id: 'central-tool-shop', name: 'Master Craftsman Tools', type: 'shop', x: 990, y: 724, width: 4, height: 3, entrance: { x: 992, y: 727 }, icon: '🔧', description: 'Quality tools' },
            { id: 'central-clothing', name: 'Royal Tailor', type: 'shop', x: 995, y: 724, width: 4, height: 3, entrance: { x: 997, y: 727 }, icon: '👗', description: 'Noble garments' },
            { id: 'central-art-shop', name: 'Creative Canvas', type: 'shop', x: 1000, y: 724, width: 4, height: 3, entrance: { x: 1002, y: 727 }, icon: '🎨', description: 'Art supplies' },
            { id: 'central-music-shop', name: 'Melodic Instruments', type: 'shop', x: 1005, y: 724, width: 4, height: 3, entrance: { x: 1007, y: 727 }, icon: '🎵', description: 'Musical instruments' },

            // Town Square District
            { id: 'central-market', name: 'Grand Bazaar', type: 'shop', x: 985, y: 730, width: 8, height: 5, entrance: { x: 989, y: 735 }, icon: '🏬', description: 'Trading market' },
            { id: 'central-arena', name: 'Colosseum of Heroes', type: 'arena', x: 995, y: 730, width: 8, height: 5, entrance: { x: 999, y: 735 }, icon: '🏟️', description: 'Combat arena' },
            
            // Government District
            { id: 'central-bank', name: 'Royal Treasury', type: 'bank', x: 975, y: 735, width: 5, height: 4, entrance: { x: 977, y: 739 }, icon: '🏦', description: 'Financial center' },
            { id: 'central-courthouse', name: 'Hall of Justice', type: 'courthouse', x: 981, y: 735, width: 5, height: 4, entrance: { x: 983, y: 739 }, icon: '⚖️', description: 'Legal center' },
            { id: 'central-post', name: 'Royal Post Office', type: 'post', x: 1005, y: 735, width: 4, height: 4, entrance: { x: 1007, y: 739 }, icon: '📮', description: 'Mail service' },
            
            // Cultural District
            { id: 'central-temple', name: 'Cathedral of Light', type: 'temple', x: 975, y: 740, width: 6, height: 5, entrance: { x: 978, y: 745 }, icon: '⛪', description: 'Holy cathedral' },
            { id: 'central-library', name: 'Royal Library', type: 'library', x: 982, y: 740, width: 6, height: 4, entrance: { x: 985, y: 744 }, icon: '📚', description: 'Knowledge repository' },
            { id: 'central-academy', name: 'Royal Academy', type: 'academy', x: 989, y: 740, width: 6, height: 4, entrance: { x: 992, y: 744 }, icon: '🎓', description: 'Learning institution' },
            { id: 'central-theater', name: 'Grand Theater', type: 'theater', x: 996, y: 740, width: 6, height: 4, entrance: { x: 999, y: 744 }, icon: '🎭', description: 'Performance hall' },
            { id: 'central-hospital', name: 'Healing Sanctuary', type: 'hospital', x: 1003, y: 740, width: 6, height: 4, entrance: { x: 1006, y: 744 }, icon: '🏥', description: 'Medical center' },

            // Services District
            { id: 'central-inn', name: 'Golden Griffin Hotel', type: 'inn', x: 975, y: 745, width: 5, height: 4, entrance: { x: 977, y: 749 }, icon: '🏨', description: 'Luxury accommodation' },
            { id: 'central-tavern', name: 'The Drunken Dragon', type: 'inn', x: 981, y: 745, width: 5, height: 4, entrance: { x: 983, y: 749 }, icon: '🍺', description: 'Popular tavern' },
            { id: 'central-stable', name: 'Royal Stables', type: 'stable', x: 987, y: 745, width: 6, height: 4, entrance: { x: 990, y: 749 }, icon: '🐎', description: 'Mount care' },
            { id: 'central-guild', name: 'Adventurer\'s Guild', type: 'guild', x: 994, y: 745, width: 6, height: 4, entrance: { x: 997, y: 749 }, icon: '⚔️', description: 'Guild headquarters' },
            { id: 'central-garrison', name: 'City Guard Post', type: 'garrison', x: 1001, y: 745, width: 5, height: 4, entrance: { x: 1003, y: 749 }, icon: '🛡️', description: 'Guard headquarters' },

            // Residential District (Compact housing)
            { id: 'central-house-1', name: 'Noble Manor', type: 'house', x: 975, y: 750, width: 3, height: 3, entrance: { x: 976, y: 753 }, icon: '🏠', description: 'Wealthy residence' },
            { id: 'central-house-2', name: 'Merchant House', type: 'house', x: 979, y: 750, width: 3, height: 3, entrance: { x: 980, y: 753 }, icon: '🏠', description: 'Trader home' },
            { id: 'central-house-3', name: 'Craftsman Cottage', type: 'house', x: 983, y: 750, width: 3, height: 3, entrance: { x: 984, y: 753 }, icon: '🏠', description: 'Artisan dwelling' },
            { id: 'central-house-4', name: 'Scholar\'s Study', type: 'house', x: 987, y: 750, width: 3, height: 3, entrance: { x: 988, y: 753 }, icon: '🏠', description: 'Academic home' },
            { id: 'central-house-5', name: 'Captain\'s Quarters', type: 'house', x: 991, y: 750, width: 3, height: 3, entrance: { x: 992, y: 753 }, icon: '🏠', description: 'Military housing' },
            { id: 'central-house-6', name: 'Garden Villa', type: 'house', x: 995, y: 750, width: 3, height: 3, entrance: { x: 996, y: 753 }, icon: '🏠', description: 'Estate with gardens' },
            { id: 'central-house-7', name: 'Tower Residence', type: 'house', x: 999, y: 750, width: 3, height: 3, entrance: { x: 1000, y: 753 }, icon: '🏠', description: 'Multi-story home' },
            { id: 'central-house-8', name: 'Artisan Workshop', type: 'house', x: 1003, y: 750, width: 3, height: 3, entrance: { x: 1004, y: 753 }, icon: '🏠', description: 'Workshop home' },

            // === NORTHERN TOWN (COMPACT FROSTPEAK) - ICE VILLAGE ===
            // Commercial District - Main Ice Street
            { id: 'north-blacksmith', name: 'Frostforge Smithy', type: 'blacksmith', x: 920, y: 140, width: 5, height: 4, entrance: { x: 922, y: 144 }, icon: '🔨', description: 'Ice forge' },
            { id: 'north-armory', name: 'Frost Weapons', type: 'shop', x: 926, y: 140, width: 4, height: 4, entrance: { x: 928, y: 144 }, icon: '❄️⚔️', description: 'Ice weapons' },
            { id: 'north-fur-shop', name: 'Winter Furs', type: 'shop', x: 931, y: 140, width: 4, height: 4, entrance: { x: 933, y: 144 }, icon: '🧥', description: 'Warm clothing' },
            { id: 'north-food-shop', name: 'Frozen Delights', type: 'shop', x: 936, y: 140, width: 4, height: 4, entrance: { x: 938, y: 144 }, icon: '🐟', description: 'Fresh fish' },
            { id: 'north-potion-shop', name: 'Arctic Elixirs', type: 'shop', x: 941, y: 140, width: 4, height: 4, entrance: { x: 943, y: 144 }, icon: '🧪', description: 'Cold potions' },
            { id: 'north-magic-shop', name: 'Frost Magic', type: 'shop', x: 946, y: 140, width: 4, height: 4, entrance: { x: 948, y: 144 }, icon: '❄️🔮', description: 'Ice magic items' },

            // Commercial District - Side Street
            { id: 'north-ice-shop', name: 'Crystal Ice Co.', type: 'shop', x: 920, y: 145, width: 4, height: 4, entrance: { x: 922, y: 149 }, icon: '🧊', description: 'Pure ice blocks' },
            { id: 'north-tool-shop', name: 'Icebreaker Tools', type: 'shop', x: 925, y: 145, width: 4, height: 4, entrance: { x: 927, y: 149 }, icon: '⛏️', description: 'Cold-weather tools' },
            { id: 'north-pet-shop', name: 'Arctic Companions', type: 'shop', x: 930, y: 145, width: 4, height: 4, entrance: { x: 932, y: 149 }, icon: '🐺', description: 'Winter pets' },
            { id: 'north-gem-shop', name: 'Ice Crystals', type: 'shop', x: 935, y: 145, width: 4, height: 4, entrance: { x: 937, y: 149 }, icon: '💎', description: 'Frozen gems' },
            { id: 'north-herb-shop', name: 'Tundra Herbs', type: 'shop', x: 940, y: 145, width: 4, height: 4, entrance: { x: 942, y: 149 }, icon: '❄️🌿', description: 'Cold herbs' },

            // Town Center
            { id: 'north-market', name: 'Frostpeak Market', type: 'shop', x: 925, y: 150, width: 8, height: 5, entrance: { x: 929, y: 155 }, icon: '🏬', description: 'Northern marketplace' },
            { id: 'north-temple', name: 'Temple of Winter', type: 'temple', x: 935, y: 150, width: 8, height: 5, entrance: { x: 939, y: 155 }, icon: '❄️⛪', description: 'Ice cathedral' },

            // Government & Services
            { id: 'north-bank', name: 'Frozen Vault', type: 'bank', x: 920, y: 156, width: 5, height: 4, entrance: { x: 922, y: 160 }, icon: '🏦', description: 'Ice-secured storage' },
            { id: 'north-courthouse', name: 'Ice Court', type: 'courthouse', x: 926, y: 156, width: 5, height: 4, entrance: { x: 928, y: 160 }, icon: '⚖️', description: 'Frozen justice' },
            { id: 'north-garrison', name: 'Ice Guard Post', type: 'garrison', x: 932, y: 156, width: 5, height: 4, entrance: { x: 934, y: 160 }, icon: '🛡️', description: 'Cold guards' },
            { id: 'north-post', name: 'Polar Post', type: 'post', x: 938, y: 156, width: 4, height: 4, entrance: { x: 940, y: 160 }, icon: '📮', description: 'Cold mail' },

            // Culture & Services
            { id: 'north-inn', name: 'Icewind Lodge', type: 'inn', x: 920, y: 161, width: 5, height: 4, entrance: { x: 922, y: 165 }, icon: '🏨', description: 'Warm hospitality' },
            { id: 'north-tavern', name: 'Frostbite Tavern', type: 'inn', x: 926, y: 161, width: 5, height: 4, entrance: { x: 928, y: 165 }, icon: '🍺', description: 'Hot drinks' },
            { id: 'north-stable', name: 'Arctic Stables', type: 'stable', x: 932, y: 161, width: 6, height: 4, entrance: { x: 935, y: 165 }, icon: '🐺', description: 'Beast sanctuary' },
            { id: 'north-library', name: 'Frost Archives', type: 'library', x: 939, y: 161, width: 5, height: 4, entrance: { x: 941, y: 165 }, icon: '📚', description: 'Ice knowledge' },

            // Residential Area
            { id: 'north-house-1', name: 'Igloo Deluxe', type: 'house', x: 920, y: 166, width: 3, height: 3, entrance: { x: 921, y: 169 }, icon: '🏠', description: 'Warm igloo' },
            { id: 'north-house-2', name: 'Ice Cabin', type: 'house', x: 924, y: 166, width: 3, height: 3, entrance: { x: 925, y: 169 }, icon: '🏠', description: 'Cozy cabin' },
            { id: 'north-house-3', name: 'Frost Manor', type: 'house', x: 928, y: 166, width: 3, height: 3, entrance: { x: 929, y: 169 }, icon: '🏠', description: 'Noble ice home' },
            { id: 'north-house-4', name: 'Arctic Lodge', type: 'house', x: 932, y: 166, width: 3, height: 3, entrance: { x: 933, y: 169 }, icon: '🏠', description: 'Hunter lodge' },
            { id: 'north-house-5', name: 'Snow Cottage', type: 'house', x: 936, y: 166, width: 3, height: 3, entrance: { x: 937, y: 169 }, icon: '🏠', description: 'Small cottage' },
            { id: 'north-house-6', name: 'Polar Villa', type: 'house', x: 940, y: 166, width: 3, height: 3, entrance: { x: 941, y: 169 }, icon: '🏠', description: 'Luxury villa' },

            // === SOUTHERN TOWN (COMPACT SUNHAVEN) - DESERT VILLAGE ===
            // Market Street - Desert Bazaar
            { id: 'south-spice-shop', name: 'Desert Spices', type: 'shop', x: 980, y: 1340, width: 4, height: 3, entrance: { x: 982, y: 1343 }, icon: '🌶️', description: 'Hot spices' },
            { id: 'south-silk-shop', name: 'Golden Silks', type: 'shop', x: 985, y: 1340, width: 4, height: 3, entrance: { x: 987, y: 1343 }, icon: '🧵', description: 'Fine fabrics' },
            { id: 'south-jewelry-shop', name: 'Oasis Jewelers', type: 'shop', x: 990, y: 1340, width: 4, height: 3, entrance: { x: 992, y: 1343 }, icon: '💍', description: 'Desert gems' },
            { id: 'south-weapon-shop', name: 'Scimitar Forge', type: 'shop', x: 995, y: 1340, width: 4, height: 3, entrance: { x: 997, y: 1343 }, icon: '⚔️', description: 'Curved blades' },
            { id: 'south-carpet-shop', name: 'Flying Carpets', type: 'shop', x: 1000, y: 1340, width: 4, height: 3, entrance: { x: 1002, y: 1343 }, icon: '🪆', description: 'Magic carpets' },
            { id: 'south-fruit-shop', name: 'Oasis Fruits', type: 'shop', x: 1005, y: 1340, width: 4, height: 3, entrance: { x: 1007, y: 1343 }, icon: '🥭', description: 'Sweet fruits' },

            // Secondary Market Street
            { id: 'south-perfume-shop', name: 'Desert Fragrances', type: 'shop', x: 980, y: 1344, width: 4, height: 3, entrance: { x: 982, y: 1347 }, icon: '🌸', description: 'Exotic scents' },
            { id: 'south-pottery-shop', name: 'Clay Creations', type: 'shop', x: 985, y: 1344, width: 4, height: 3, entrance: { x: 987, y: 1347 }, icon: '🏺', description: 'Desert pottery' },
            { id: 'south-tent-shop', name: 'Nomad Tents', type: 'shop', x: 990, y: 1344, width: 4, height: 3, entrance: { x: 992, y: 1347 }, icon: '⛺', description: 'Travel gear' },
            { id: 'south-camel-shop', name: 'Camel Traders', type: 'shop', x: 995, y: 1344, width: 4, height: 3, entrance: { x: 997, y: 1347 }, icon: '🐪', description: 'Desert mounts' },
            { id: 'south-water-shop', name: 'Pure Springs', type: 'shop', x: 1000, y: 1344, width: 4, height: 3, entrance: { x: 1002, y: 1347 }, icon: '💧', description: 'Fresh water' },

            // Town Center District
            { id: 'south-market', name: 'Sunhaven Bazaar', type: 'shop', x: 985, y: 1350, width: 8, height: 5, entrance: { x: 989, y: 1355 }, icon: '🏬', description: 'Grand marketplace' },
            { id: 'south-palace', name: 'Sultan\'s Palace', type: 'palace', x: 995, y: 1350, width: 8, height: 5, entrance: { x: 999, y: 1355 }, icon: '🏰', description: 'Royal palace' },
            
            // Government & Services District
            { id: 'south-bank', name: 'Desert Gold Reserve', type: 'bank', x: 980, y: 1356, width: 5, height: 4, entrance: { x: 982, y: 1360 }, icon: '🏦', description: 'Wealth storage' },
            { id: 'south-guild', name: 'Sunhaven Guild', type: 'guild', x: 986, y: 1356, width: 5, height: 4, entrance: { x: 988, y: 1360 }, icon: '⚔️', description: 'Adventurer HQ' },
            { id: 'south-garrison', name: 'Desert Guard', type: 'garrison', x: 992, y: 1356, width: 5, height: 4, entrance: { x: 994, y: 1360 }, icon: '🛡️', description: 'Sand guards' },
            { id: 'south-post', name: 'Caravan Post', type: 'post', x: 998, y: 1356, width: 4, height: 4, entrance: { x: 1000, y: 1360 }, icon: '📮', description: 'Desert mail' },
            
            // Cultural District
            { id: 'south-temple', name: 'Temple of Sun God', type: 'temple', x: 980, y: 1361, width: 6, height: 5, entrance: { x: 983, y: 1366 }, icon: '☀️⛪', description: 'Sun temple' },
            { id: 'south-library', name: 'Desert Scrolls', type: 'library', x: 987, y: 1361, width: 6, height: 4, entrance: { x: 990, y: 1365 }, icon: '📜', description: 'Ancient knowledge' },
            { id: 'south-academy', name: 'Sand Academy', type: 'academy', x: 994, y: 1361, width: 6, height: 4, entrance: { x: 997, y: 1365 }, icon: '🎓', description: 'Desert learning' },
            { id: 'south-theater', name: 'Oasis Theater', type: 'theater', x: 1001, y: 1361, width: 6, height: 4, entrance: { x: 1004, y: 1365 }, icon: '🎭', description: 'Desert arts' },
            
            // Services District  
            { id: 'south-inn', name: 'Desert Rose Inn', type: 'inn', x: 980, y: 1367, width: 5, height: 4, entrance: { x: 982, y: 1371 }, icon: '🏨', description: 'Oasis rest' },
            { id: 'south-tavern', name: 'Mirage Tavern', type: 'inn', x: 1008, y: 1265, width: 13, height: 9, entrance: { x: 1014, y: 1274 }, icon: '🍺', description: 'Cool drinks' },
            { id: 'south-stable', name: 'Desert Stables', type: 'stable', x: 1024, y: 1265, width: 17, height: 11, entrance: { x: 1032, y: 1276 }, icon: '🐎', description: 'Mount breeding' },
            { id: 'south-arena', name: 'Sandstorm Arena', type: 'arena', x: 986, y: 1367, width: 6, height: 4, entrance: { x: 989, y: 1371 }, icon: '🏟️', description: 'Desert colosseum' },
            { id: 'south-hospital', name: 'Oasis Healing', type: 'hospital', x: 993, y: 1367, width: 6, height: 4, entrance: { x: 996, y: 1371 }, icon: '🏥', description: 'Desert medicine' },

            // Residential District
            { id: 'south-house-1', name: 'Sand Villa', type: 'house', x: 980, y: 1372, width: 3, height: 3, entrance: { x: 981, y: 1375 }, icon: '🏠', description: 'Desert home' },
            { id: 'south-house-2', name: 'Oasis Cottage', type: 'house', x: 984, y: 1372, width: 3, height: 3, entrance: { x: 985, y: 1375 }, icon: '🏠', description: 'Cool refuge' },
            { id: 'south-house-3', name: 'Nomad Tent', type: 'house', x: 988, y: 1372, width: 3, height: 3, entrance: { x: 989, y: 1375 }, icon: '🏠', description: 'Portable home' },
            { id: 'south-house-4', name: 'Merchant Mansion', type: 'house', x: 992, y: 1372, width: 3, height: 3, entrance: { x: 993, y: 1375 }, icon: '🏠', description: 'Wealthy estate' },
            { id: 'south-house-5', name: 'Spice Master Home', type: 'house', x: 996, y: 1372, width: 3, height: 3, entrance: { x: 997, y: 1375 }, icon: '🏠', description: 'Aromatic dwelling' },
            { id: 'south-house-6', name: 'Caravan Rest', type: 'house', x: 1000, y: 1372, width: 3, height: 3, entrance: { x: 1001, y: 1375 }, icon: '🏠', description: 'Traveler home' },

            // === EASTERN TOWN (MOONPORT MEGALOPOLIS) - MARITIME EMPIRE ===
            // Harbor District - Row 1
            { id: 'east-fish-shop', name: 'Fresh Catch Market', type: 'shop', x: 1600, y: 600, width: 11, height: 8, entrance: { x: 1605, y: 608 }, icon: '🐟', description: 'Daily fresh fish' },
            { id: 'east-pearl-shop', name: 'Deep Pearl Divers', type: 'shop', x: 1614, y: 600, width: 10, height: 8, entrance: { x: 1619, y: 608 }, icon: '🦪', description: 'Ocean pearls' },
            { id: 'east-salt-shop', name: 'Sea Salt Co.', type: 'shop', x: 1627, y: 600, width: 9, height: 8, entrance: { x: 1631, y: 608 }, icon: '🧂', description: 'Pure sea salt' },
            { id: 'east-rope-shop', name: 'Sailor\'s Rope', type: 'shop', x: 1639, y: 600, width: 12, height: 8, entrance: { x: 1645, y: 608 }, icon: '🪢', description: 'Marine rope' },
            { id: 'east-compass-shop', name: 'Navigator Tools', type: 'shop', x: 1654, y: 600, width: 11, height: 8, entrance: { x: 1659, y: 608 }, icon: '🧭', description: 'Navigation gear' },
            { id: 'east-sail-shop', name: 'Wind & Wave Sails', type: 'shop', x: 1668, y: 600, width: 10, height: 8, entrance: { x: 1673, y: 608 }, icon: '⛵', description: 'Ship sails' },
            { id: 'east-anchor-shop', name: 'Iron Anchor Works', type: 'shop', x: 1681, y: 600, width: 12, height: 8, entrance: { x: 1687, y: 608 }, icon: '⚓', description: 'Heavy anchors' },
            { id: 'east-barrel-shop', name: 'Cooperage Barrels', type: 'shop', x: 1696, y: 600, width: 9, height: 8, entrance: { x: 1700, y: 608 }, icon: '🛢️', description: 'Water barrels' },
            { id: 'east-net-shop', name: 'Fishing Net Co.', type: 'shop', x: 1708, y: 600, width: 11, height: 8, entrance: { x: 1713, y: 608 }, icon: '🕸️', description: 'Fishing nets' },
            { id: 'east-shell-shop', name: 'Seashell Treasures', type: 'shop', x: 1722, y: 600, width: 10, height: 8, entrance: { x: 1727, y: 608 }, icon: '🐚', description: 'Ocean shells' },

            // Main Port District - Row 2
            { id: 'east-dock', name: 'Moonport Harbor', type: 'dock', x: 1600, y: 615, width: 25, height: 18, entrance: { x: 1612, y: 633 }, icon: '⚓', description: 'Main harbor' },
            { id: 'east-shipyard', name: 'Deep Sea Shipyard', type: 'dock', x: 1628, y: 615, width: 22, height: 15, entrance: { x: 1639, y: 630 }, icon: '🚢', description: 'Ship construction' },
            { id: 'east-bank', name: 'Tidal Vault', type: 'bank', x: 1653, y: 615, width: 16, height: 11, entrance: { x: 1661, y: 626 }, icon: '🏦', description: 'Maritime bank' },
            { id: 'east-inn', name: 'Ocean\'s Rest Hotel', type: 'inn', x: 1672, y: 615, width: 18, height: 12, entrance: { x: 1681, y: 627 }, icon: '🏨', description: 'Seaside resort' },
            { id: 'east-tavern', name: 'Sailor\'s Rest', type: 'inn', x: 1693, y: 615, width: 14, height: 10, entrance: { x: 1700, y: 625 }, icon: '🍺', description: 'Sea tavern' },
            { id: 'east-auction', name: 'Maritime Trade Hall', type: 'auction', x: 1710, y: 615, width: 17, height: 12, entrance: { x: 1718, y: 627 }, icon: '🏪', description: 'Sea trade center' },
            { id: 'east-warehouse', name: 'Port Storage', type: 'warehouse', x: 1730, y: 615, width: 15, height: 10, entrance: { x: 1737, y: 625 }, icon: '📦', description: 'Cargo storage' },

            // Cultural & Spiritual District - Row 3  
            { id: 'east-temple', name: 'Cathedral of Deep', type: 'temple', x: 1610, y: 640, width: 20, height: 15, entrance: { x: 1620, y: 655 }, icon: '🌊⛪', description: 'Ocean temple' },
            { id: 'east-library', name: 'Maritime Archives', type: 'library', x: 1633, y: 640, width: 16, height: 11, entrance: { x: 1641, y: 651 }, icon: '📚', description: 'Sea knowledge' },
            { id: 'east-academy', name: 'Naval Academy', type: 'academy', x: 1652, y: 640, width: 17, height: 12, entrance: { x: 1660, y: 652 }, icon: '🎓', description: 'Sea learning' },
            { id: 'east-lighthouse', name: 'Moonbeam Lighthouse', type: 'lighthouse', x: 1672, y: 640, width: 8, height: 20, entrance: { x: 1676, y: 660 }, icon: '🗼', description: 'Navigation beacon' },
            { id: 'east-market', name: 'Pearl & Salt Market', type: 'shop', x: 1683, y: 640, width: 22, height: 13, entrance: { x: 1694, y: 653 }, icon: '🏬', description: 'Sea goods market' },
            { id: 'east-theater', name: 'Tidal Theater', type: 'theater', x: 1708, y: 640, width: 15, height: 10, entrance: { x: 1715, y: 650 }, icon: '🎭', description: 'Sea performances' },
            { id: 'east-hospital', name: 'Sea Medic Center', type: 'hospital', x: 1726, y: 640, width: 14, height: 9, entrance: { x: 1733, y: 649 }, icon: '🏥', description: 'Maritime medicine' },

            // Harbor Residential
            { id: 'east-house-1', name: 'Captain\'s Quarters', type: 'house', x: 1600, y: 665, width: 10, height: 8, entrance: { x: 1605, y: 673 }, icon: '🏠', description: 'Ship captain home' },
            { id: 'east-house-2', name: 'Fisherman Cottage', type: 'house', x: 1613, y: 665, width: 8, height: 7, entrance: { x: 1617, y: 672 }, icon: '🏠', description: 'Fisher dwelling' },
            { id: 'east-house-3', name: 'Dock Worker Lodge', type: 'house', x: 1624, y: 665, width: 9, height: 6, entrance: { x: 1628, y: 671 }, icon: '🏠', description: 'Port worker home' },
            { id: 'east-house-4', name: 'Merchant Marina', type: 'house', x: 1636, y: 665, width: 11, height: 8, entrance: { x: 1641, y: 673 }, icon: '🏠', description: 'Trader mansion' },
            { id: 'east-house-5', name: 'Sailor\'s Rest', type: 'house', x: 1650, y: 665, width: 8, height: 7, entrance: { x: 1654, y: 672 }, icon: '🏠', description: 'Seaman home' },
            { id: 'east-house-6', name: 'Lighthouse Keeper', type: 'house', x: 1661, y: 665, width: 7, height: 6, entrance: { x: 1664, y: 671 }, icon: '🏠', description: 'Keeper residence' },

            // === WESTERN TOWN (IRONHOLD MEGALOPOLIS) - INDUSTRIAL EMPIRE ===
            // Industrial District - Row 1
            { id: 'west-metal-shop', name: 'Iron & Steel Co.', type: 'shop', x: 80, y: 550, width: 12, height: 8, entrance: { x: 86, y: 558 }, icon: '⚙️', description: 'Raw metals' },
            { id: 'west-tool-shop', name: 'Master Tools', type: 'shop', x: 95, y: 550, width: 11, height: 8, entrance: { x: 100, y: 558 }, icon: '🔧', description: 'Quality tools' },
            { id: 'west-gear-shop', name: 'Precision Gears', type: 'shop', x: 109, y: 550, width: 10, height: 8, entrance: { x: 114, y: 558 }, icon: '⚙️', description: 'Mechanical parts' },
            { id: 'west-coal-shop', name: 'Black Coal Mine', type: 'shop', x: 122, y: 550, width: 9, height: 8, entrance: { x: 126, y: 558 }, icon: '🪨', description: 'Forge fuel' },
            { id: 'west-hammer-shop', name: 'Heavy Hammers', type: 'shop', x: 134, y: 550, width: 11, height: 8, entrance: { x: 139, y: 558 }, icon: '🔨', description: 'Smith hammers' },
            { id: 'west-anvil-shop', name: 'Iron Anvils', type: 'shop', x: 148, y: 550, width: 10, height: 8, entrance: { x: 153, y: 558 }, icon: '🔨', description: 'Heavy anvils' },
            { id: 'west-armor-shop', name: 'Plate & Mail', type: 'shop', x: 161, y: 550, width: 12, height: 8, entrance: { x: 167, y: 558 }, icon: '🛡️', description: 'Heavy armor' },
            { id: 'west-weapon-shop', name: 'War Weapons', type: 'shop', x: 176, y: 550, width: 11, height: 8, entrance: { x: 181, y: 558 }, icon: '⚔️', description: 'Battle weapons' },
            { id: 'west-machinery-shop', name: 'Steam Machines', type: 'shop', x: 190, y: 550, width: 13, height: 8, entrance: { x: 196, y: 558 }, icon: '🏭', description: 'Industrial machines' },
            { id: 'west-oil-shop', name: 'Black Oil Co.', type: 'shop', x: 206, y: 550, width: 10, height: 8, entrance: { x: 211, y: 558 }, icon: '🛢️', description: 'Machine oil' },

            // Manufacturing District - Row 2
            { id: 'west-foundry', name: 'Great Foundry', type: 'foundry', x: 80, y: 565, width: 20, height: 15, entrance: { x: 90, y: 580 }, icon: '🏭', description: 'Manufacturing hub' },
            { id: 'west-foundry-2', name: 'Steam Works', type: 'foundry', x: 103, y: 565, width: 18, height: 12, entrance: { x: 112, y: 577 }, icon: '⚙️', description: 'Gear production' },
            { id: 'west-armory', name: 'Ironhold Armory', type: 'armory', x: 124, y: 565, width: 17, height: 13, entrance: { x: 132, y: 578 }, icon: '🛡️', description: 'Weapon storage' },
            { id: 'west-bank', name: 'Dwarven Vault', type: 'bank', x: 144, y: 565, width: 16, height: 11, entrance: { x: 152, y: 576 }, icon: '🏦', description: 'Underground vault' },
            { id: 'west-inn', name: 'Hammer & Anvil Lodge', type: 'inn', x: 163, y: 565, width: 18, height: 12, entrance: { x: 172, y: 577 }, icon: '🏨', description: 'Worker lodging' },
            { id: 'west-tavern', name: 'Molten Ale House', type: 'inn', x: 184, y: 565, width: 14, height: 10, entrance: { x: 191, y: 575 }, icon: '🍺', description: 'Hot drinks' },
            { id: 'west-stable', name: 'Iron Beast Stables', type: 'stable', x: 201, y: 565, width: 15, height: 11, entrance: { x: 208, y: 576 }, icon: '🐎', description: 'Work animals' },

            // Cultural & Administrative - Row 3
            { id: 'west-temple', name: 'Temple of Forge', type: 'temple', x: 90, y: 585, width: 18, height: 14, entrance: { x: 99, y: 599 }, icon: '🔥⛪', description: 'Sacred forge' },
            { id: 'west-library', name: 'Engineering Archives', type: 'library', x: 111, y: 585, width: 16, height: 11, entrance: { x: 119, y: 596 }, icon: '📚', description: 'Technical knowledge' },
            { id: 'west-academy', name: 'Smithcraft Academy', type: 'academy', x: 130, y: 585, width: 17, height: 12, entrance: { x: 138, y: 597 }, icon: '🎓', description: 'Craft learning' },
            { id: 'west-market', name: 'Industrial Hub', type: 'shop', x: 150, y: 585, width: 22, height: 13, entrance: { x: 161, y: 598 }, icon: '🏬', description: 'Manufacturing market' },
            { id: 'west-courthouse', name: 'Forge Court', type: 'courthouse', x: 175, y: 585, width: 15, height: 11, entrance: { x: 182, y: 596 }, icon: '⚖️', description: 'Industrial law' },
            { id: 'west-hospital', name: 'Steam Medic Hall', type: 'hospital', x: 193, y: 585, width: 14, height: 9, entrance: { x: 200, y: 594 }, icon: '🏥', description: 'Worker medicine' },
            { id: 'west-post', name: 'Gear Post Office', type: 'post', x: 210, y: 585, width: 12, height: 9, entrance: { x: 216, y: 594 }, icon: '📮', description: 'Industrial mail' },

            // Worker Housing District
            { id: 'west-house-1', name: 'Foreman\'s House', type: 'house', x: 80, y: 605, width: 9, height: 7, entrance: { x: 84, y: 612 }, icon: '🏠', description: 'Supervisor home' },
            { id: 'west-house-2', name: 'Smith Cottage', type: 'house', x: 92, y: 605, width: 8, height: 6, entrance: { x: 96, y: 611 }, icon: '🏠', description: 'Blacksmith home' },
            { id: 'west-house-3', name: 'Miner Lodge', type: 'house', x: 103, y: 605, width: 7, height: 6, entrance: { x: 106, y: 611 }, icon: '🏠', description: 'Coal miner home' },
            { id: 'west-house-4', name: 'Engineer Mansion', type: 'house', x: 113, y: 605, width: 11, height: 8, entrance: { x: 118, y: 613 }, icon: '🏠', description: 'Chief engineer' },
            { id: 'west-house-5', name: 'Worker Barracks', type: 'house', x: 127, y: 605, width: 10, height: 7, entrance: { x: 132, y: 612 }, icon: '🏠', description: 'Shared housing' },
            { id: 'west-house-6', name: 'Gear Keeper Home', type: 'house', x: 140, y: 605, width: 8, height: 6, entrance: { x: 144, y: 611 }, icon: '🏠', description: 'Mechanic dwelling' },

            // === NEW MASSIVE TOWNS ===

            // NORTHWEST TOWN - SKYREACH (MOUNTAIN EMPIRE)
            { id: 'nw-citadel', name: 'Skyreach Citadel', type: 'palace', x: 300, y: 200, width: 60, height: 45, entrance: { x: 330, y: 245 }, icon: '🏰', description: 'Mountain fortress palace' },
            { id: 'nw-market', name: 'Highland Mega Market', type: 'shop', x: 370, y: 200, width: 55, height: 35, entrance: { x: 397, y: 235 }, icon: '🏬', description: 'Massive mountain marketplace' },
            { id: 'nw-bank', name: 'Mountain Peak Vault', type: 'bank', x: 430, y: 200, width: 40, height: 30, entrance: { x: 450, y: 230 }, icon: '🏦', description: 'High-altitude treasury' },
            { id: 'nw-inn', name: 'Eagle\'s Rest Lodge', type: 'inn', x: 280, y: 250, width: 45, height: 32, entrance: { x: 302, y: 282 }, icon: '🏨', description: 'Majestic mountain inn' },
            { id: 'nw-temple', name: 'Shrine of the Sky God', type: 'temple', x: 330, y: 250, width: 50, height: 38, entrance: { x: 355, y: 288 }, icon: '⛰️⛪', description: 'Sacred mountain temple' },
            { id: 'nw-forge', name: 'Skyforge Foundry', type: 'foundry', x: 385, y: 250, width: 48, height: 35, entrance: { x: 409, y: 285 }, icon: '🔨', description: 'High-altitude forge' },

            // NORTHEAST TOWN - STARFALL (MYSTICAL EMPIRE)
            { id: 'ne-tower', name: 'Arcanum Mega Tower', type: 'tower', x: 1500, y: 150, width: 35, height: 60, entrance: { x: 1517, y: 210 }, icon: '🗼', description: 'Colossal magic tower' },
            { id: 'ne-academy', name: 'Starfall Magic Academy', type: 'academy', x: 1540, y: 150, width: 65, height: 45, entrance: { x: 1572, y: 195 }, icon: '🎓', description: 'Enormous magic school' },
            { id: 'ne-library', name: 'Cosmic Knowledge Vault', type: 'library', x: 1610, y: 150, width: 50, height: 38, entrance: { x: 1635, y: 188 }, icon: '📚', description: 'Massive magical library' },
            { id: 'ne-market', name: 'Ethereal Bazaar', type: 'shop', x: 1480, y: 220, width: 52, height: 35, entrance: { x: 1506, y: 255 }, icon: '🔮', description: 'Gigantic magic marketplace' },
            { id: 'ne-temple', name: 'Star Temple Complex', type: 'temple', x: 1540, y: 220, width: 45, height: 40, entrance: { x: 1562, y: 260 }, icon: '⭐⛪', description: 'Celestial temple complex' },
            { id: 'ne-bank', name: 'Astral Treasury', type: 'bank', x: 1590, y: 220, width: 42, height: 32, entrance: { x: 1611, y: 252 }, icon: '🏦', description: 'Mystical wealth storage' },

            // SOUTHWEST TOWN - EMBERFALL (VOLCANIC EMPIRE)
            { id: 'sw-volcano', name: 'Emberfall Crater City', type: 'city', x: 200, y: 1200, width: 80, height: 60, entrance: { x: 240, y: 1260 }, icon: '🌋', description: 'Massive volcanic city' },
            { id: 'sw-forge', name: 'Lava Forge Complex', type: 'foundry', x: 290, y: 1200, width: 55, height: 42, entrance: { x: 317, y: 1242 }, icon: '🔥🔨', description: 'Volcanic forge facility' },
            { id: 'sw-market', name: 'Molten Goods Market', type: 'shop', x: 350, y: 1200, width: 50, height: 35, entrance: { x: 375, y: 1235 }, icon: '🏬', description: 'Fiery marketplace' },
            { id: 'sw-temple', name: 'Shrine of the Fire God', type: 'temple', x: 180, y: 1270, width: 48, height: 40, entrance: { x: 204, y: 1310 }, icon: '🔥⛪', description: 'Sacred volcanic temple' },
            { id: 'sw-inn', name: 'Ember & Ash Tavern', type: 'inn', x: 235, y: 1270, width: 45, height: 32, entrance: { x: 257, y: 1302 }, icon: '🏨', description: 'Volcanic inn complex' },
            { id: 'sw-bank', name: 'Obsidian Vault', type: 'bank', x: 285, y: 1270, width: 40, height: 28, entrance: { x: 305, y: 1298 }, icon: '🏦', description: 'Heat-proof treasury' },

            // SOUTHEAST TOWN - CRYSTALDEEP (UNDERGROUND EMPIRE) 
            { id: 'se-cavern', name: 'Crystal Cavern Metropolis', type: 'city', x: 1400, y: 1300, width: 75, height: 55, entrance: { x: 1437, y: 1355 }, icon: '💎', description: 'Underground crystal city' },
            { id: 'se-mine', name: 'Great Crystal Mines', type: 'mine', x: 1480, y: 1300, width: 60, height: 45, entrance: { x: 1510, y: 1345 }, icon: '⛏️', description: 'Enormous mining operation' },
            { id: 'se-market', name: 'Gemstone Exchange', type: 'shop', x: 1380, y: 1360, width: 48, height: 35, entrance: { x: 1404, y: 1395 }, icon: '💎🏬', description: 'Massive gem marketplace' },
            { id: 'se-temple', name: 'Temple of Earth Spirits', type: 'temple', x: 1435, y: 1360, width: 42, height: 38, entrance: { x: 1456, y: 1398 }, icon: '🗿⛪', description: 'Sacred underground temple' },
            { id: 'se-bank', name: 'Crystal Vault Fortress', type: 'bank', x: 1485, y: 1360, width: 45, height: 32, entrance: { x: 1507, y: 1392 }, icon: '🏦', description: 'Crystalline treasury' },
            { id: 'se-inn', name: 'Depths Rest Lodge', type: 'inn', x: 1535, y: 1360, width: 40, height: 30, entrance: { x: 1555, y: 1390 }, icon: '🏨', description: 'Underground hospitality' },

            // CENTRAL-NORTH TOWN - WINDSPIRE (AERIAL EMPIRE)
            { id: 'cn-spire', name: 'Windspire Sky City', type: 'city', x: 950, y: 400, width: 70, height: 50, entrance: { x: 985, y: 450 }, icon: '🏗️', description: 'Floating sky metropolis' },
            { id: 'cn-port', name: 'Airship Harbor', type: 'dock', x: 1025, y: 400, width: 55, height: 40, entrance: { x: 1052, y: 440 }, icon: '✈️', description: 'Massive airship port' },
            { id: 'cn-market', name: 'Cloud Nine Bazaar', type: 'shop', x: 1085, y: 400, width: 48, height: 35, entrance: { x: 1109, y: 435 }, icon: '☁️🏬', description: 'Sky-high marketplace' },
            { id: 'cn-temple', name: 'Temple of Wind', type: 'temple', x: 930, y: 455, width: 45, height: 40, entrance: { x: 952, y: 495 }, icon: '💨⛪', description: 'Aerial temple complex' },
            { id: 'cn-bank', name: 'Stratosphere Vault', type: 'bank', x: 980, y: 455, width: 42, height: 30, entrance: { x: 1001, y: 485 }, icon: '🏦', description: 'High-altitude bank' },
            { id: 'cn-inn', name: 'Cloud Walker Inn', type: 'inn', x: 1025, y: 455, width: 40, height: 32, entrance: { x: 1045, y: 487 }, icon: '🏨', description: 'Sky-level lodging' },

            // CENTRAL-SOUTH TOWN - SHADOWMERE (DARK EMPIRE)
            { id: 'cs-fortress', name: 'Shadowmere Dark Citadel', type: 'palace', x: 950, y: 1050, width: 65, height: 48, entrance: { x: 982, y: 1098 }, icon: '🖤', description: 'Ominous dark fortress' },
            { id: 'cs-market', name: 'Midnight Market', type: 'shop', x: 1020, y: 1050, width: 50, height: 36, entrance: { x: 1045, y: 1086 }, icon: '🌙🏬', description: 'Dark goods marketplace' },
            { id: 'cs-temple', name: 'Temple of Shadows', type: 'temple', x: 1075, y: 1050, width: 45, height: 42, entrance: { x: 1097, y: 1092 }, icon: '🌑⛪', description: 'Dark temple complex' },
            { id: 'cs-inn', name: 'Ravens Rest Tavern', type: 'inn', x: 930, y: 1105, width: 44, height: 32, entrance: { x: 952, y: 1137 }, icon: '🏨', description: 'Gothic inn complex' },
            { id: 'cs-bank', name: 'Void Vault', type: 'bank', x: 980, y: 1105, width: 38, height: 28, entrance: { x: 999, y: 1133 }, icon: '🏦', description: 'Shadow-secured treasury' },
            { id: 'cs-arena', name: 'Dark Colosseum', type: 'arena', x: 1025, y: 1105, width: 48, height: 35, entrance: { x: 1049, y: 1140 }, icon: '🏟️', description: 'Sinister battle arena' }
        ];

        const NPCS = [
            // === CENTRAL TOWN (METROPOLIS) NPCs ===
            // Main Weapon District
            { id: 'central-blacksmith', name: 'Gareth the Blacksmith', type: 'blacksmith', x: 962, y: 710, sprite: '🔨', color: '#dc2626', 
              dialogue: ["Welcome to my forge!", "I craft the finest weapons in the land.", "What can I make for you today?"],
              shop: [
                { id: 'iron-sword', name: 'Iron Sword', type: 'weapon', price: 100, description: 'A sturdy iron blade', icon: '⚔️' },
                { id: 'steel-armor', name: 'Steel Armor', type: 'armor', price: 200, description: 'Protective steel plating', icon: '🛡️' },
                { id: 'iron-helmet', name: 'Iron Helmet', type: 'armor', price: 75, description: 'Basic head protection', icon: '⛑️' }
              ]
            },
            { id: 'central-blacksmith-2', name: 'Master Forgewright Borin', type: 'blacksmith', x: 965, y: 715, sprite: '🔨', color: '#dc2626', 
              dialogue: ["Finest weapons for finest warriors!", "My hammer never rests!", "Steel bends to my will!"],
              shop: [
                { id: 'steel-sword', name: 'Steel Sword', type: 'weapon', price: 150, description: 'Sharp steel blade', icon: '⚔️' },
                { id: 'chain-armor', name: 'Chain Armor', type: 'armor', price: 180, description: 'Flexible protection', icon: '🛡️' }
              ]
            },
            { id: 'central-weaponsmith-3', name: 'Elite Armorer Thane', type: 'blacksmith', x: 968, y: 705, sprite: '⚔️', color: '#991b1b', 
              dialogue: ["Elite weapons for elite fighters!", "Perfection in every blade!", "Only the best will do!"],
              shop: [
                { id: 'master-sword', name: 'Master Crafted Sword', type: 'weapon', price: 300, description: 'Perfectly balanced blade', icon: '⚔️' },
                { id: 'plate-armor', name: 'Plate Armor', type: 'armor', price: 400, description: 'Heavy duty protection', icon: '🛡️' }
              ]
            },
            { id: 'royal-weapon-master', name: 'Royal Weaponmaster Kane', type: 'blacksmith', x: 990, y: 708, sprite: '👑⚔️', color: '#fbbf24', 
              dialogue: ["Weapons fit for royalty!", "Legendary craftsmanship!", "My blades have crowned kings!"],
              shop: [
                { id: 'royal-blade', name: 'Royal Blade', type: 'weapon', price: 500, description: 'Blade of kings', icon: '👑⚔️' },
                { id: 'royal-armor', name: 'Royal Guard Armor', type: 'armor', price: 600, description: 'Protection of nobility', icon: '👑🛡️' }
              ]
            },
            { id: 'blade-specialist', name: 'Blade Specialist Vera', type: 'blacksmith', x: 995, y: 712, sprite: '🗡️', color: '#dc2626', 
              dialogue: ["Blades are my specialty!", "Sharp, sharper, sharpest!", "Cut through anything!"],
              shop: [
                { id: 'razor-blade', name: 'Razor Blade', type: 'weapon', price: 220, description: 'Incredibly sharp', icon: '🗡️' },
                { id: 'cutting-armor', name: 'Blade-Proof Vest', type: 'armor', price: 250, description: 'Blade resistance', icon: '🦺' }
              ]
            },
            { id: 'shield-master', name: 'Shield Master Gromm', type: 'blacksmith', x: 1000, y: 707, sprite: '🛡️', color: '#6b7280', 
              dialogue: ["Defense is the best offense!", "My shields never break!", "Protection perfected!"],
              shop: [
                { id: 'tower-shield', name: 'Tower Shield', type: 'armor', price: 180, description: 'Maximum protection', icon: '🛡️' },
                { id: 'round-shield', name: 'Round Shield', type: 'armor', price: 120, description: 'Balanced defense', icon: '🛡️' }
              ]
            },
            { id: 'weapon-enchanter', name: 'Enchanter Mystix', type: 'blacksmith', x: 1010, y: 715, sprite: '✨⚔️', color: '#7c3aed', 
              dialogue: ["Magic makes weapons mighty!", "Enchanted steel!", "Power beyond the physical!"],
              shop: [
                { id: 'flame-sword', name: 'Flame Sword', type: 'weapon', price: 350, description: 'Burns enemies', icon: '🔥⚔️' },
                { id: 'frost-armor', name: 'Frost Armor', type: 'armor', price: 320, description: 'Ice protection', icon: '❄️🛡️' }
              ]
            },
            { id: 'bow-fletcher', name: 'Master Fletcher Hawkeye', type: 'blacksmith', x: 1015, y: 710, sprite: '🏹', color: '#059669', 
              dialogue: ["Arrows fly true from my bows!", "Precision in every shot!", "Range is king!"],
              shop: [
                { id: 'longbow', name: 'Longbow', type: 'weapon', price: 180, description: 'Long range bow', icon: '🏹' },
                { id: 'crossbow', name: 'Heavy Crossbow', type: 'weapon', price: 280, description: 'Powerful crossbow', icon: '🏹' }
              ]
            },

            // Potion Quarter - Alchemists Galore
            { id: 'central-alchemist', name: 'Luna the Alchemist', type: 'shopkeeper', x: 1036, y: 710, sprite: '🧙‍♀️', color: '#7c3aed',
              dialogue: ["Greetings, traveler!", "My potions will aid you on your journey.", "Each brew is made with ancient recipes."],
              shop: [
                { id: 'health-potion', name: 'Health Potion', type: 'potion', price: 25, description: 'Restores 50 HP', icon: '❤️' },
                { id: 'mana-potion', name: 'Mana Potion', type: 'potion', price: 30, description: 'Restores 50 MP', icon: '💙' },
                { id: 'strength-potion', name: 'Strength Elixir', type: 'potion', price: 50, description: 'Temporarily increases attack', icon: '💪' }
              ]
            },
            { id: 'master-alchemist', name: 'Master Alchemist Zara', type: 'shopkeeper', x: 1040, y: 715, sprite: '⚗️', color: '#7c3aed',
              dialogue: ["Advanced potions for advanced adventurers!", "Science and magic combined!", "My brews work wonders!"],
              shop: [
                { id: 'super-health', name: 'Super Health Potion', type: 'potion', price: 75, description: 'Restores 150 HP', icon: '❤️✨' },
                { id: 'super-mana', name: 'Super Mana Potion', type: 'potion', price: 85, description: 'Restores 150 MP', icon: '💙✨' }
              ]
            },
            { id: 'poison-master', name: 'Poison Master Vex', type: 'shopkeeper', x: 1032, y: 720, sprite: '☠️', color: '#4b5563',
              dialogue: ["Deadly brews for deadly foes!", "Poison is an art form!", "Death in a bottle!"],
              shop: [
                { id: 'poison-blade', name: 'Poison Blade', type: 'weapon', price: 200, description: 'Venomous weapon', icon: '☠️⚔️' },
                { id: 'antidote', name: 'Antidote', type: 'potion', price: 40, description: 'Cures poison', icon: '🧪' }
              ]
            },
            { id: 'elixir-brewer', name: 'Elixir Brewer Sage', type: 'shopkeeper', x: 1050, y: 712, sprite: '🍶', color: '#8b5cf6',
              dialogue: ["Rare elixirs for true adventurers!", "Ancient recipes revealed!", "Power in liquid form!"],
              shop: [
                { id: 'speed-elixir', name: 'Speed Elixir', type: 'potion', price: 60, description: 'Increases movement speed', icon: '💨' },
                { id: 'wisdom-elixir', name: 'Wisdom Elixir', type: 'potion', price: 80, description: 'Boosts experience gain', icon: '🧠' }
              ]
            },
            { id: 'herb-collector', name: 'Herbalist Willow', type: 'shopkeeper', x: 1045, y: 718, sprite: '🌿', color: '#059669',
              dialogue: ["Natural remedies from nature!", "The earth provides all healing!", "Green magic is the truest magic!"],
              shop: [
                { id: 'herb-bundle', name: 'Healing Herbs', type: 'misc', price: 15, description: 'Natural healing', icon: '🌿' },
                { id: 'nature-potion', name: 'Nature\'s Blessing', type: 'potion', price: 45, description: 'Herbal healing potion', icon: '🌿❤️' }
              ]
            },

            // Banking District - Financial Hub
            { id: 'central-banker', name: 'Banker Goldtooth', type: 'banker', x: 955, y: 740, sprite: '🏦', color: '#f59e0b',
              dialogue: ["Welcome to the Royal Treasury!", "Your valuables are safe with us.", "How may I assist you today?"]
            },
            { id: 'vault-keeper', name: 'Vault Keeper Ironlock', type: 'banker', x: 960, y: 745, sprite: '🔐', color: '#6b7280',
              dialogue: ["Maximum security guaranteed!", "Your gold sleeps safely here!", "Trust in our vault system!"]
            },
            { id: 'gold-exchanger', name: 'Gold Exchanger Midas', type: 'banker', x: 965, y: 740, sprite: '💰', color: '#fbbf24',
              dialogue: ["Best exchange rates in the realm!", "Gold, silver, platinum!", "Your currency, my expertise!"]
            },
            { id: 'investment-advisor', name: 'Investment Sage Marcus', type: 'banker', x: 970, y: 750, sprite: '📊', color: '#3b82f6',
              dialogue: ["Grow your wealth with smart investments!", "Gold makes gold!", "Financial wisdom awaits!"]
            },
            { id: 'loan-officer', name: 'Loan Officer Sterling', type: 'banker', x: 985, y: 745, sprite: '📋', color: '#6366f1',
              dialogue: ["Need gold? I can help!", "Reasonable rates, fair terms!", "Investment in your future!"]
            },
            { id: 'treasure-appraiser', name: 'Appraiser Gemwise', type: 'banker', x: 990, y: 748, sprite: '💎', color: '#ec4899',
              dialogue: ["I know the value of everything!", "Gems, artifacts, treasures!", "Fair appraisals, honest prices!"]
            },

            // Hospitality District - Massive Hotel Complex  
            { id: 'central-innkeeper', name: 'Miriam the Innkeeper', type: 'innkeeper', x: 1022, y: 742, sprite: '🏨', color: '#ec4899',
              dialogue: ["Welcome to the Golden Griffin!", "Rest here and set your respawn point.", "We have the finest beds in the realm!"]
            },
            { id: 'hotel-concierge', name: 'Concierge Elegant', type: 'innkeeper', x: 1030, y: 745, sprite: '🎩', color: '#6366f1',
              dialogue: ["Premium service for premium guests!", "Luxury accommodation awaits!", "Your comfort is our priority!"]
            },
            { id: 'tavern-keeper', name: 'Tavern Keeper Ale', type: 'innkeeper', x: 1025, y: 750, sprite: '🍺', color: '#92400e',
              dialogue: ["Best ale in the capital!", "Stories and spirits flow here!", "Drink up, adventurer!"]
            },
            { id: 'room-service', name: 'Room Service Chief', type: 'innkeeper', x: 1035, y: 748, sprite: '🛎️', color: '#059669',
              dialogue: ["Anything you need, anytime!", "Service beyond expectations!", "Your wish is my command!"]
            },
            { id: 'stable-master', name: 'Stable Master Hoofcare', type: 'innkeeper', x: 1040, y: 752, sprite: '🐎', color: '#92400e',
              dialogue: ["Your mounts get the best care!", "Fed, groomed, and rested!", "Happy horses, happy travels!"]
            },
            { id: 'night-manager', name: 'Night Manager Nocturne', type: 'innkeeper', x: 1050, y: 745, sprite: '🌙', color: '#4b5563',
              dialogue: ["24-hour service, every day!", "Rest assured, we never sleep!", "Night or day, we're here!"]
            },

            // Arena District - Combat Complex
            { id: 'central-arena-master', name: 'Arena Master Rex', type: 'trainer', x: 1005, y: 775, sprite: '🛡️', color: '#f59e0b',
              dialogue: ["Welcome to the Colosseum!", "Prove your worth in combat!", "Only the strongest survive here!"]
            },
            { id: 'gladiator-trainer', name: 'Gladiator Trainer Maximus', type: 'trainer', x: 1010, y: 780, sprite: '⚔️', color: '#dc2626',
              dialogue: ["Train like a gladiator!", "Strength through combat!", "Victory or death!"]
            },
            { id: 'combat-instructor', name: 'Combat Instructor Blade', type: 'trainer', x: 1015, y: 775, sprite: '🥋', color: '#059669',
              dialogue: ["Learn the art of war!", "Technique over strength!", "Master your weapon!"]
            },
            { id: 'weapon-master', name: 'Weapon Master Slash', type: 'trainer', x: 1000, y: 780, sprite: '🗡️', color: '#6b7280',
              dialogue: ["Every weapon has its secret!", "Find your perfect match!", "Mastery takes dedication!"]
            },
            { id: 'arena-healer', name: 'Arena Healer Mercy', type: 'healer', x: 995, y: 785, sprite: '🩺', color: '#10b981',
              dialogue: ["Patch you up after battle!", "Wounds heal, glory lasts!", "Ready for another round?"]
            },
            { id: 'betting-master', name: 'Betting Master Chance', type: 'gambler', x: 1020, y: 785, sprite: '🎲', color: '#fbbf24',
              dialogue: ["Place your bets here!", "Fortune favors the bold!", "Who will win today?"]
            },

            // Market District - Massive Trading Hub
            { id: 'market-overseer', name: 'Market Overseer Trade', type: 'shopkeeper', x: 950, y: 805, sprite: '🏬', color: '#3b82f6',
              dialogue: ["Welcome to the Grand Bazaar!", "Everything you need, we have!", "Best prices, best quality!"],
              shop: [
                { id: 'basic-supplies', name: 'Adventure Kit', type: 'misc', price: 50, description: 'Essential supplies', icon: '🎒' },
                { id: 'rope', name: 'Sturdy Rope', type: 'misc', price: 10, description: 'Climbing rope', icon: '🪢' }
              ]
            },
            { id: 'exotic-trader', name: 'Exotic Trader Mystique', type: 'shopkeeper', x: 955, y: 810, sprite: '🏺', color: '#7c3aed',
              dialogue: ["Rare items from distant lands!", "Treasures beyond imagination!", "Exotic goods for exotic tastes!"],
              shop: [
                { id: 'exotic-gem', name: 'Exotic Gem', type: 'misc', price: 200, description: 'Mysterious gem', icon: '💎' },
                { id: 'ancient-relic', name: 'Ancient Relic', type: 'misc', price: 500, description: 'Powerful artifact', icon: '🏺' }
              ]
            },
            { id: 'spice-merchant', name: 'Spice Merchant Saffron', type: 'shopkeeper', x: 960, y: 805, sprite: '🌶️', color: '#dc2626',
              dialogue: ["Spices from across the world!", "Flavor and magic combined!", "Taste the exotic!"],
              shop: [
                { id: 'magic-spice', name: 'Magic Spice', type: 'misc', price: 30, description: 'Enhances food', icon: '🌶️✨' },
                { id: 'healing-spice', name: 'Healing Herbs', type: 'potion', price: 20, description: 'Natural healing', icon: '🌿' }
              ]
            },
            { id: 'cloth-merchant', name: 'Cloth Merchant Silk', type: 'shopkeeper', x: 965, y: 810, sprite: '🧵', color: '#ec4899',
              dialogue: ["Finest fabrics and cloth!", "Dress like nobility!", "Quality materials for quality gear!"],
              shop: [
                { id: 'silk-robe', name: 'Silk Robe', type: 'armor', price: 120, description: 'Elegant clothing', icon: '👘' },
                { id: 'leather-vest', name: 'Leather Vest', type: 'armor', price: 80, description: 'Flexible protection', icon: '🦺' }
              ]
            },

            // Library District - Knowledge Hub
            { id: 'head-librarian', name: 'Head Librarian Sage', type: 'librarian', x: 991, y: 800, sprite: '📚', color: '#6366f1',
              dialogue: ["Welcome to the Royal Library!", "Knowledge is the greatest treasure!", "What wisdom do you seek?"]
            },
            { id: 'ancient-scholar', name: 'Ancient Scholar Wise', type: 'librarian', x: 995, y: 805, sprite: '📜', color: '#8b5cf6',
              dialogue: ["Ancient texts hold ancient power!", "History teaches all lessons!", "Learn from the past!"]
            },
            { id: 'magic-researcher', name: 'Magic Researcher Arcane', type: 'librarian', x: 985, y: 802, sprite: '🔮', color: '#7c3aed',
              dialogue: ["Magical knowledge awaits!", "Spells and theories abound!", "Master the arcane arts!"]
            },
            { id: 'book-keeper', name: 'Book Keeper Chronicle', type: 'librarian', x: 1000, y: 807, sprite: '📖', color: '#059669',
              dialogue: ["Every book tells a story!", "Adventures in every page!", "Reading is its own adventure!"]
            },

            // Temple District - Sacred Complex
            { id: 'high-priest', name: 'High Priest Divine', type: 'priest', x: 1025, y: 803, sprite: '⛪', color: '#f3f4f6',
              dialogue: ["Blessings upon you, traveler!", "The light protects all!", "Seek peace in troubled times!"]
            },
            { id: 'temple-healer', name: 'Temple Healer Grace', type: 'healer', x: 1030, y: 808, sprite: '🩺', color: '#10b981',
              dialogue: ["Divine healing for the faithful!", "Wounds of body and spirit!", "Light heals all darkness!"]
            },
            { id: 'altar-keeper', name: 'Altar Keeper Sacred', type: 'priest', x: 1020, y: 810, sprite: '🕯️', color: '#fbbf24',
              dialogue: ["The altar offers blessings!", "Pray for guidance!", "Faith lights the way!"]
            },
            { id: 'temple-guardian', name: 'Temple Guardian Shield', type: 'guard', x: 1035, y: 805, sprite: '🛡️⛪', color: '#6b7280',
              dialogue: ["This sacred ground is protected!", "Peace through strength!", "The faithful are safe here!"]
            },

            // Guild District - Adventurer Headquarters
            { id: 'guild-master', name: 'Guild Master Champion', type: 'guild', x: 1062, y: 800, sprite: '⚔️', color: '#dc2626',
              dialogue: ["Welcome to the guild!", "Unity makes us stronger!", "Join us in great adventures!"]
            },
            { id: 'quest-coordinator', name: 'Quest Coordinator Task', type: 'quest-giver', x: 1055, y: 805, sprite: '📋', color: '#3b82f6',
              dialogue: ["Quests for every skill level!", "Adventure awaits the brave!", "What challenge calls to you?"]
            },
            { id: 'guild-trainer', name: 'Guild Trainer Elite', type: 'trainer', x: 1070, y: 802, sprite: '🎯', color: '#059669',
              dialogue: ["Train with the best!", "Guild members get priority!", "Excellence through practice!"]
            },
            { id: 'guild-merchant', name: 'Guild Merchant Supply', type: 'shopkeeper', x: 1065, y: 810, sprite: '🏪', color: '#f59e0b',
              dialogue: ["Guild supplies at member prices!", "Quality gear for guild members!", "Support your guild!"],
              shop: [
                { id: 'guild-banner', name: 'Guild Banner', type: 'misc', price: 100, description: 'Show your pride', icon: '🏴' },
                { id: 'guild-potion', name: 'Guild Strength Potion', type: 'potion', price: 40, description: 'Guild-exclusive brew', icon: '💪' }
              ]
            },

            // === NEW NPC TYPES THROUGHOUT THE WORLD ===
            
            // === CENTRAL TOWN NPCs - ORGANIZED BY DISTRICT ===
            // Market District NPCs (Around Shopping Area)
            { id: 'fortune-teller-1', name: 'Madame Mystica', type: 'fortune-teller', x: 975, y: 675, sprite: '🔮', color: '#7c3aed',
              dialogue: ["Your future unfolds before me!", "The stars speak of great deeds!", "What does destiny hold for you?"]
            },
            { id: 'weapon-merchant', name: 'Arms Dealer Steel', type: 'shopkeeper', x: 945, y: 672, sprite: '⚔️', color: '#dc2626',
              dialogue: ["Finest weapons in the realm!", "Steel that never fails!", "Arm yourself for adventure!"]
            },
            { id: 'potion-vendor', name: 'Alchemist Brew', type: 'shopkeeper', x: 965, y: 672, sprite: '🧪', color: '#8b5cf6',
              dialogue: ["Magical elixirs and potions!", "Healing brews and power draughts!", "What ailment shall I cure?"]
            },
            { id: 'jewelry-crafter', name: 'Gem Master Sparkle', type: 'shopkeeper', x: 980, y: 672, sprite: '💍', color: '#f59e0b',
              dialogue: ["Precious gems and fine jewelry!", "Beauty that enhances power!", "Adorn yourself with elegance!"]
            },

            // Tavern District NPCs
            { id: 'bartender-1', name: 'Barkeep Ale', type: 'bartender', x: 975, y: 677, sprite: '🍺', color: '#92400e',
              dialogue: ["Best drinks in the capital!", "Stories flow with the ale!", "What\'s your poison, friend?"],
              shop: [
                { id: 'ale', name: 'Hearty Ale', type: 'drink', price: 5, description: 'Boosts morale', icon: '🍺' },
                { id: 'wine', name: 'Fine Wine', type: 'drink', price: 15, description: 'Elegant refreshment', icon: '🍷' }
              ]
            },
            { id: 'bartender-2', name: 'Mixmaster Spirits', type: 'bartender', x: 982, y: 677, sprite: '🍸', color: '#ec4899',
              dialogue: ["Exotic cocktails and elixirs!", "Liquid courage for brave souls!", "Special drinks for special people!"],
              shop: [
                { id: 'courage-cocktail', name: 'Liquid Courage', type: 'drink', price: 25, description: 'Reduces fear', icon: '🍸' },
                { id: 'wisdom-wine', name: 'Wisdom Wine', type: 'drink', price: 30, description: 'Enhances perception', icon: '🍷✨' }
              ]
            },

            // Government District NPCs (Around Garrison/Courthouse)
            { id: 'city-guard-1', name: 'Captain Vigilant', type: 'guard', x: 1006, y: 677, sprite: '🛡️👮', color: '#3b82f6',
              dialogue: ["The city is under our protection!", "Crime doesn\'t pay here!", "Stay safe, citizen!"]
            },
            { id: 'city-guard-2', name: 'Sergeant Shield', type: 'guard', x: 1015, y: 677, sprite: '⚔️👮', color: '#1e40af',
              dialogue: ["Order and justice for all!", "The law protects the innocent!", "Peace through strength!"]
            },
            { id: 'gate-guard', name: 'Gate Guardian Steel', type: 'guard', x: 1003, y: 681, sprite: '🚪🛡️', color: '#6b7280',
              dialogue: ["None shall pass without permission!", "The gates are secure!", "Papers, please!"]
            },
            { id: 'patrol-guard', name: 'Patrol Officer Scout', type: 'guard', x: 1011, y: 681, sprite: '👮‍♀️', color: '#059669',
              dialogue: ["All quiet on patrol!", "Eyes on the streets!", "Safety is our mission!"]
            },

            // Residential District NPCs
            { id: 'chef-1', name: 'Master Chef Flavor', type: 'cook', x: 975, y: 695, sprite: '👨‍🍳', color: '#f59e0b',
              dialogue: ["Culinary magic in every dish!", "Food that feeds the soul!", "Taste perfection!"],
              shop: [
                { id: 'gourmet-meal', name: 'Gourmet Meal', type: 'food', price: 30, description: 'Boosts all stats', icon: '🍽️' },
                { id: 'energy-snack', name: 'Energy Snack', type: 'food', price: 10, description: 'Quick energy boost', icon: '🥨' }
              ]
            },
            { id: 'chef-2', name: 'Baker Crumb', type: 'cook', x: 980, y: 695, sprite: '🧑‍🍳🍞', color: '#92400e',
              dialogue: ["Fresh baked goods daily!", "Bread is the staff of life!", "Sweet treats for sweet people!"],
              shop: [
                { id: 'sweet-roll', name: 'Honey Sweet Roll', type: 'food', price: 8, description: 'Delicious pastry', icon: '🥐' },
                { id: 'meat-pie', name: 'Hearty Meat Pie', type: 'food', price: 15, description: 'Filling meal', icon: '🥧' }
              ]
            },

            // Entertainment District NPCs (Around Theater/Arena)
            { id: 'bard-1', name: 'Bard Melody', type: 'entertainer', x: 1024, y: 687, sprite: '🎵', color: '#ec4899',
              dialogue: ["Songs of heroic deeds!", "Music soothes the savage beast!", "What song shall I play?"]
            },
            { id: 'jester-1', name: 'Jester Giggles', type: 'entertainer', x: 1027, y: 690, sprite: '🃏', color: '#fbbf24',
              dialogue: ["Laughter is the best medicine!", "Jokes and jests for all!", "Smile, adventurer!"]
            },
            { id: 'dancer-1', name: 'Dancer Grace', type: 'entertainer', x: 1021, y: 692, sprite: '💃', color: '#ec4899',
              dialogue: ["Dance like no one is watching!", "Movement is poetry in motion!", "Feel the rhythm!"]
            },
            { id: 'gambler-1', name: 'Lucky Dice', type: 'gambler', x: 966, y: 687, sprite: '🎲', color: '#fbbf24',
              dialogue: ["Feeling lucky today?", "Fortune favors the bold!", "Roll the dice!"]
            },
            { id: 'card-shark', name: 'Card Master Shuffle', type: 'gambler', x: 969, y: 690, sprite: '🃏🎴', color: '#dc2626',
              dialogue: ["Cards never lie!", "Know when to hold, know when to fold!", "Lady Luck is calling!"]
            },

            // Academy District NPCs  
            { id: 'scholar-1', name: 'Scholar Research', type: 'scholar', x: 1014, y: 687, sprite: '🔬', color: '#3b82f6',
              dialogue: ["Knowledge advances civilization!", "Research reveals truth!", "Science lights the way!"]
            },
            { id: 'scholar-2', name: 'Professor Wisdom', type: 'scholar', x: 1017, y: 690, sprite: '👨‍🏫', color: '#6366f1',
              dialogue: ["Teaching is the greatest calling!", "Learn today, lead tomorrow!", "Education is power!"]
            },

            // Government Administrative NPCs
            { id: 'tax-collector-1', name: 'Tax Collector Coin', type: 'tax-collector', x: 1018, y: 677, sprite: '💰📋', color: '#6b7280',
              dialogue: ["Taxes are due, citizen!", "The realm needs funding!", "Pay your fair share!"]
            },
            { id: 'tax-collector-2', name: 'Revenue Agent Gold', type: 'tax-collector', x: 1021, y: 680, sprite: '📊💰', color: '#4b5563',
              dialogue: ["Financial accountability for all!", "Records must be kept!", "Compliance is mandatory!"]
            },

            // Shadow District NPCs (Discrete locations)
            { id: 'spy-1', name: 'Shadow Agent Whisper', type: 'spy', x: 935, y: 690, sprite: '🥷', color: '#1f2937',
              dialogue: ["Information is currency!", "I hear all, see all!", "Secrets have value!"]
            },
            { id: 'spy-2', name: 'Intelligence Officer', type: 'spy', x: 1035, y: 685, sprite: '👤', color: '#374151',
              dialogue: ["The realm has many enemies!", "Knowledge protects us all!", "Trust no one completely!"]
            },

            // === OUTLYING RURAL NPCs ===
            // Farmers (Outside town but nearby)
            { id: 'farmer-1', name: 'Farmer Greenthumb', type: 'farmer', x: 920, y: 710, sprite: '👨‍🌾', color: '#059669',
              dialogue: ["Fresh crops from the fields!", "Hard work feeds the realm!", "The earth provides all!"],
              shop: [
                { id: 'bread', name: 'Fresh Bread', type: 'food', price: 3, description: 'Restores some health', icon: '🍞' },
                { id: 'vegetables', name: 'Farm Vegetables', type: 'food', price: 5, description: 'Nutritious meal', icon: '🥕' }
              ]
            },
            { id: 'farmer-2', name: 'Harvest Master Fields', type: 'farmer', x: 1040, y: 710, sprite: '🚜', color: '#92400e',
              dialogue: ["Best harvest in years!", "Feed the hungry masses!", "From farm to table!"],
              shop: [
                { id: 'grain', name: 'Quality Grain', type: 'food', price: 8, description: 'High-energy food', icon: '🌾' },
                { id: 'fruit', name: 'Orchard Fruit', type: 'food', price: 4, description: 'Sweet and healthy', icon: '🍎' }
              ]
            },

            // Miners (Near resource areas)
            { id: 'miner-1', name: 'Miner Pickaxe', type: 'miner', x: 880, y: 720, sprite: '⛏️', color: '#6b7280',
              dialogue: ["Deep mines, rich veins!", "Digging for treasure!", "The earth holds secrets!"],
              shop: [
                { id: 'iron-ore', name: 'Iron Ore', type: 'material', price: 15, description: 'Raw iron', icon: '🪨' },
                { id: 'coal', name: 'Coal', type: 'material', price: 8, description: 'Fuel for forges', icon: '🪨' }
              ]
            },
            { id: 'miner-2', name: 'Gem Hunter Crystal', type: 'miner', x: 1080, y: 720, sprite: '💎⛏️', color: '#ec4899',
              dialogue: ["Precious gems from the deep!", "Every swing could strike gold!", "The depths hold riches!"],
              shop: [
                { id: 'rough-gem', name: 'Rough Gem', type: 'material', price: 50, description: 'Uncut precious stone', icon: '💎' },
                { id: 'crystal', name: 'Magic Crystal', type: 'material', price: 100, description: 'Magical energy source', icon: '🔮' }
              ]
            },

            // Fishermen (Near water sources)
            { id: 'fisherman-1', name: 'Angler Netcast', type: 'fisherman', x: 850, y: 680, sprite: '🎣', color: '#3b82f6',
              dialogue: ["Fresh fish from the sea!", "Patience brings the best catch!", "The water provides!"],
              shop: [
                { id: 'fish', name: 'Fresh Fish', type: 'food', price: 6, description: 'Healthy seafood', icon: '🐟' },
                { id: 'seafood', name: 'Seafood Platter', type: 'food', price: 20, description: 'Gourmet meal', icon: '🦐' }
              ]
            },
            { id: 'fisherman-2', name: 'Captain Catch', type: 'fisherman', x: 1100, y: 680, sprite: '⚓🎣', color: '#1e40af',
              dialogue: ["Deep sea fishing is my specialty!", "The biggest fish for brave souls!", "Adventure on the high seas!"],
              shop: [
                { id: 'rare-fish', name: 'Rare Deep Fish', type: 'food', price: 40, description: 'Exotic seafood', icon: '🐟✨' },
                { id: 'sea-bait', name: 'Magic Bait', type: 'misc', price: 12, description: 'Attracts rare fish', icon: '🪱' }
              ]
            },

            // Wizards
            { id: 'wizard-1', name: 'Wizard Starweaver', type: 'wizard', x: 1520, y: 180, sprite: '🧙‍♂️', color: '#7c3aed',
              dialogue: ["Magic flows through all things!", "Ancient powers await!", "The arcane calls to you!"],
              shop: [
                { id: 'spell-scroll-fireball', name: 'Fireball Scroll', type: 'scroll', price: 100, description: 'Explosive spell', icon: '🔥📜' },
                { id: 'magic-wand', name: 'Magic Wand', type: 'weapon', price: 200, description: 'Channels magical energy', icon: '🪄' }
              ]
            },
            { id: 'wizard-2', name: 'Archmage Cosmic', type: 'wizard', x: 1570, y: 170, sprite: '✨🧙', color: '#8b5cf6',
              dialogue: ["The cosmos holds infinite power!", "Stars guide my magic!", "Universal forces obey!"],
              shop: [
                { id: 'cosmic-robe', name: 'Cosmic Robe', type: 'armor', price: 300, description: 'Star-blessed garment', icon: '⭐👘' },
                { id: 'void-crystal', name: 'Void Crystal', type: 'misc', price: 500, description: 'Dark energy source', icon: '🔮⚫' }
              ]
            },

            // === NORTHERN TOWN (FROSTPEAK) - COMPACT ORGANIZED NPCs ===
            // Blacksmith District (Tightly Grouped)
            { id: 'north-blacksmith', name: 'Bjorn Ironforge', type: 'blacksmith', x: 856, y: 56, sprite: '🔨❄️', color: '#1e40af',
              dialogue: ["The cold makes the steel stronger!", "Northern weapons are unmatched!", "Feel the bite of frost-forged steel!"],
              shop: [
                { id: 'frost-blade', name: 'Frost Blade', type: 'weapon', price: 250, description: 'Ice-cold steel that never dulls', icon: '❄️⚔️' },
                { id: 'winter-armor', name: 'Winter Guard Armor', type: 'armor', price: 350, description: 'Protects against cold and steel', icon: '🛡️❄️' }
              ]
            },
            { id: 'north-blacksmith-2', name: 'Master Frostforge', type: 'blacksmith', x: 870, y: 56, sprite: '🔨', color: '#0ea5e9',
              dialogue: ["Ice and steel, perfectly combined!", "Coldest forge, hottest flames!", "Arctic craftsmanship supreme!"],
              shop: [
                { id: 'ice-hammer', name: 'Ice Hammer', type: 'weapon', price: 200, description: 'Frozen solid weapon', icon: '🔨❄️' },
                { id: 'glacier-shield', name: 'Glacier Shield', type: 'armor', price: 280, description: 'Unbreakable ice protection', icon: '🛡️❄️' }
              ]
            },
            { id: 'north-blacksmith-3', name: 'Ironwork Specialist Frost', type: 'blacksmith', x: 883, y: 56, sprite: '⚒️', color: '#1e3a8a',
              dialogue: ["Specialized northern metalwork!", "Every piece a work of art!", "Frozen perfection!"],
              shop: [
                { id: 'frost-spear', name: 'Frost Spear', type: 'weapon', price: 180, description: 'Long-range ice weapon', icon: '❄️🗡️' },
                { id: 'arctic-boots', name: 'Arctic Boots', type: 'armor', price: 120, description: 'Never slip on ice', icon: '🥾❄️' }
              ]
            },
            // Business District NPCs (Around Banks/Shops)
            { id: 'north-auctioneer', name: 'Auctioneer Frost', type: 'auction', x: 949, y: 77, sprite: '🏪', color: '#7c3aed',
              dialogue: ["Welcome to the finest auction house!", "Rare items from across the world!", "Place your bids wisely!"]
            },
            { id: 'north-banker', name: 'Vault-Keep Igrid', type: 'banker', x: 857, y: 73, sprite: '🏦', color: '#1e40af',
              dialogue: ["Your treasures stay frozen in time here!", "The vault never thaws, never fails.", "Perfect preservation guaranteed!"]
            },
            { id: 'north-merchant', name: 'Arctic Trader', type: 'shopkeeper', x: 965, y: 82, sprite: '🏬', color: '#0284c7',
              dialogue: ["Northern goods for hardy souls!", "Survive the cold with our wares!", "Quality tested by winter itself!"],
              shop: [
                { id: 'fur-cloak', name: 'Warm Fur Cloak', type: 'armor', price: 90, description: 'Protection from cold', icon: '🧥' },
                { id: 'hot-soup', name: 'Hot Soup', type: 'food', price: 12, description: 'Warms you up', icon: '🍲' }
              ]
            },

            // Hospitality District NPCs (Around Inns)
            { id: 'north-innkeeper', name: 'Helga Warmhearth', type: 'innkeeper', x: 876, y: 74, sprite: '🏨', color: '#dc2626',
              dialogue: ["Come warm yourself by our fire!", "Hot meals and warm beds await!", "The cold cannot reach you here!"]
            },
            { id: 'north-innkeeper-2', name: 'Frost Tavern Master', type: 'innkeeper', x: 895, y: 74, sprite: '🍺', color: '#92400e',
              dialogue: ["Warmest tavern in the coldest town!", "Hot drinks, cold beer!", "Stories by the fireplace!"]
            },

            // Religious District NPCs (Around Temple)
            { id: 'north-temple-priest', name: 'Winter Priest Glacier', type: 'priest', x: 869, y: 87, sprite: '❄️⛪', color: '#e5e7eb',
              dialogue: ["Blessings of the eternal winter!", "Cold purifies the soul!", "Find peace in the frost!"]
            },

            // Services District NPCs
            { id: 'north-stable-master', name: 'Fenrir the Beast-Tamer', type: 'stable', x: 929, y: 73, sprite: '🐺', color: '#374151',
              dialogue: ["Northern wolves make the best mounts!", "Fierce, loyal, and fast as the wind!", "Choose your companion wisely!"]
            },
            { id: 'north-portal-keeper', name: 'Portal-Mage Crystus', type: 'portal', x: 967, y: 73, sprite: '🌀', color: '#8b5cf6',
              dialogue: ["The portals connect all realms!", "Travel instantly across the world!", "Magic makes distance meaningless!"]
            },

            // Leadership NPCs
            { id: 'north-quest-giver', name: 'Jarl Iceheart', type: 'quest-giver', x: 889, y: 87, sprite: '👑', color: '#1e40af',
              dialogue: ["The north faces many dangers!", "Prove yourself worthy of northern steel!", "Glory awaits the brave!"]
            },

            // === SOUTHERN TOWN (SUNHAVEN) - REORGANIZED NPCs ===
            // Market Street NPCs (Around shops)
            { id: 'south-spice-trader', name: 'Spice Lord Saffron', type: 'shopkeeper', x: 982, y: 1343, sprite: '🌶️', color: '#dc2626',
              dialogue: ["Spices from the far reaches!", "Flavor and magic in every grain!", "Taste the desert\'s bounty!"],
              shop: [
                { id: 'fire-spice', name: 'Dragon Fire Spice', type: 'misc', price: 25, description: 'Adds fire damage to weapons', icon: '🌶️🔥' },
                { id: 'healing-herb', name: 'Desert Healing Herb', type: 'potion', price: 18, description: 'Natural desert remedy', icon: '🌿' }
              ]
            },
            { id: 'south-silk-merchant', name: 'Silk Weaver Shimmer', type: 'shopkeeper', x: 987, y: 1343, sprite: '🧵', color: '#ec4899',
              dialogue: ["Finest silks from desert worms!", "Smooth as sand, strong as stone!", "Luxury fabric for distinguished adventurers!"]
            },
            { id: 'south-jeweler', name: 'Gem-Cutter Dazzle', type: 'shopkeeper', x: 992, y: 1343, sprite: '💍', color: '#fbbf24',
              dialogue: ["Desert gems burn with inner fire!", "Each stone tells a desert tale!", "Treasures from the deep sands!"]
            },
            { id: 'south-weapon-smith', name: 'Scimitar-Master Curve', type: 'shopkeeper', x: 997, y: 1343, sprite: '⚔️', color: '#dc2626',
              dialogue: ["Curved blades for curved paths!", "Desert steel, forged in sun and sand!", "Sharp as the desert wind!"],
              shop: [
                { id: 'desert-blade', name: 'Scimitar of the Sands', type: 'weapon', price: 200, description: 'Curved blade of desert steel', icon: '🏜️⚔️' },
                { id: 'silk-robes', name: 'Silk Robes', type: 'armor', price: 150, description: 'Light but surprisingly protective', icon: '👘' }
              ]
            },
            { id: 'south-carpet-dealer', name: 'Flying Carpet Merchant', type: 'shopkeeper', x: 1002, y: 1343, sprite: '🪆', color: '#8b5cf6',
              dialogue: ["Magical carpets for magical journeys!", "Soar above the desert sands!", "Travel in style and comfort!"]
            },
            { id: 'south-fruit-seller', name: 'Oasis Fruit Vendor', type: 'shopkeeper', x: 1007, y: 1343, sprite: '🥭', color: '#10b981',
              dialogue: ["Sweet fruits from desert oases!", "Juicy refreshment in hot lands!", "Taste the essence of the oasis!"]
            },

            // Town Center NPCs
            { id: 'south-market-master', name: 'Bazaar-Master Goldcoin', type: 'shopkeeper', x: 989, y: 1355, sprite: '🏬', color: '#f59e0b',
              dialogue: ["Welcome to the greatest market!", "Exotic goods from distant lands!", "Everything has a price, friend!"],
              shop: [
                { id: 'spice-potion', name: 'Spiced Healing Draught', type: 'potion', price: 40, description: 'Exotic healing with a kick', icon: '🌶️❤️' }
              ]
            },
            { id: 'south-sultan', name: 'Sultan Magnificence', type: 'palace', x: 999, y: 1355, sprite: '👑🏰', color: '#fbbf24',
              dialogue: ["Welcome to my palace!", "Riches beyond imagination!", "The desert\'s crown jewel!"]
            },

            // Government & Services NPCs
            { id: 'south-banker', name: 'Gold-Master Wealth', type: 'banker', x: 982, y: 1360, sprite: '🏦', color: '#1e40af',
              dialogue: ["Desert gold is the finest gold!", "Your wealth grows like desert flowers!", "Investment opportunities in every grain of sand!"]
            },
            { id: 'south-guild-master', name: 'Guild-Master Fatima', type: 'guild', x: 988, y: 1360, sprite: '⚔️', color: '#dc2626',
              dialogue: ["Join our guild for great adventures!", "Together we are stronger!", "The guild always supports its members!"]
            },
            { id: 'south-guard-captain', name: 'Captain Sandstorm', type: 'guard', x: 994, y: 1360, sprite: '🛡️', color: '#92400e',
              dialogue: ["Desert guards never tire!", "We protect the oasis of civilization!", "Sand and sun make us strong!"]
            },

            // Cultural District NPCs
            { id: 'south-sun-priest', name: 'Sun Priest Radiance', type: 'priest', x: 983, y: 1366, sprite: '☀️⛪', color: '#fbbf24',
              dialogue: ["The sun god watches over all!", "Solar power flows through me!", "Light conquers all darkness!"]
            },
            { id: 'south-librarian', name: 'Scroll-Keeper Ancient', type: 'librarian', x: 990, y: 1365, sprite: '📜', color: '#6b7280',
              dialogue: ["Ancient knowledge preserved in papyrus!", "Desert wisdom from forgotten ages!", "The sands remember all secrets!"]
            },
            { id: 'south-teacher', name: 'Desert Scholar Wise', type: 'teacher', x: 997, y: 1365, sprite: '🎓', color: '#059669',
              dialogue: ["Learning blooms even in the desert!", "Education is an oasis for the mind!", "Knowledge flows like water in drought!"]
            },
            { id: 'south-actor', name: 'Desert Drama Queen', type: 'performer', x: 1004, y: 1365, sprite: '🎭', color: '#ec4899',
              dialogue: ["Stories as vast as the desert!", "Drama under the burning sun!", "Every performance a mirage of wonder!"]
            },

            // Services District NPCs
            { id: 'south-innkeeper', name: 'Oasis-Keep Cool', type: 'innkeeper', x: 982, y: 1371, sprite: '🏨', color: '#92400e',
              dialogue: ["Cool relief from desert heat!", "Refreshing stays in burning lands!", "Rest in the shadow of comfort!"]
            },

            // === EASTERN TOWN (MOONPORT) - EXPANDED NPCs ===
            { id: 'east-dock-master', name: 'Captain Saltheart', type: 'shopkeeper', x: 1740, y: 670, sprite: '⚓', color: '#3b82f6',
              dialogue: ["Welcome to Moonport!", "Finest goods from overseas!", "The sea provides all treasures!"],
              shop: [
                { id: 'pearl-sword', name: 'Pearl-Hilted Blade', type: 'weapon', price: 300, description: 'Elegant weapon from the deep', icon: '🦪⚔️' },
                { id: 'sea-armor', name: 'Tide-Walker Armor', type: 'armor', price: 280, description: 'Never rusts, never fails', icon: '🌊🛡️' },
                { id: 'sea-potion', name: 'Brine of Healing', type: 'potion', price: 35, description: 'Healing power of the sea', icon: '🌊❤️' }
              ]
            },
            { id: 'east-shipwright', name: 'Master Shipwright', type: 'blacksmith', x: 1672, y: 727, sprite: '🚢🔨', color: '#0ea5e9',
              dialogue: ["I build ships for any sea!", "From rowboat to warship!", "Ocean-worthy craftsmanship!"],
              shop: [
                { id: 'harpoon', name: 'Sea Hunter Harpoon', type: 'weapon', price: 180, description: 'Perfect for sea monsters', icon: '🔱' },
                { id: 'sailor-coat', name: 'Sailor\'s Storm Coat', type: 'armor', price: 140, description: 'Weather-resistant gear', icon: '🧥' }
              ]
            },
            { id: 'east-auctioneer', name: 'Trade-Master Coral', type: 'auction', x: 1720, y: 715, sprite: '🏪', color: '#ec4899',
              dialogue: ["Rare treasures from the deep!", "Auction house of the seas!", "Bid on legendary maritime finds!"]
            },
            { id: 'east-priest', name: 'Moon-Priest Celestine', type: 'trainer', x: 1770, y: 735, sprite: '🌊⛪', color: '#f3f4f6',
              dialogue: ["The moon guides all travelers!", "Seek blessing for your journey!", "Healing light shines here!"]
            },
            { id: 'east-bank-manager', name: 'Tide Vault Manager', type: 'banker', x: 1671, y: 765, sprite: '🏦', color: '#0284c7',
              dialogue: ["Your wealth flows safely here!", "Tidal security never fails!", "Banking with oceanic power!"]
            },
            { id: 'east-inn-master', name: 'Ocean View Innkeeper', type: 'innkeeper', x: 1724, y: 772, sprite: '🏨', color: '#ec4899',
              dialogue: ["Rest with ocean views!", "Seaside hospitality!", "The sound of waves soothes all!"]
            },
            { id: 'east-pearl-diver', name: 'Pearl Diver Deep', type: 'miner', x: 1776, y: 770, sprite: '🦪', color: '#ec4899',
              dialogue: ["Treasures from the ocean floor!", "Pearl diving is my art!", "Deep waters hold riches!"],
              shop: [
                { id: 'black-pearl', name: 'Rare Black Pearl', type: 'misc', price: 200, description: 'Extremely valuable gem', icon: '🖤🦪' },
                { id: 'sea-salt', name: 'Pure Sea Salt', type: 'misc', price: 10, description: 'Preserves food longer', icon: '🧂' }
              ]
            },
            { id: 'east-quest-giver', name: 'Harbor-Master Triton', type: 'quest-giver', x: 1750, y: 695, sprite: '🔱', color: '#3b82f6',
              dialogue: ["The seas hold many mysteries!", "Brave the waves for great rewards!", "Chart new courses to fortune!"]
            },

            // === WESTERN TOWN (IRONHOLD) - EXPANDED NPCs ===
            { id: 'west-forgemaster', name: 'Forgemaster Thorek', type: 'blacksmith', x: 155, y: 630, sprite: '🏭', color: '#dc2626',
              dialogue: ["The great foundry never sleeps!", "Industrial-grade weapons and armor!", "Mass production, maximum quality!"],
              shop: [
                { id: 'factory-sword', name: 'Factory-Forged Blade', type: 'weapon', price: 150, description: 'Reliable and mass-produced', icon: '🏭⚔️' },
                { id: 'industrial-armor', name: 'Industrial Plate', type: 'armor', price: 220, description: 'Heavy-duty protection', icon: '🏭🛡️' }
              ]
            },
            { id: 'west-steam-engineer', name: 'Steam Engineer Gear', type: 'blacksmith', x: 225, y: 620, sprite: '⚙️🔨', color: '#f59e0b',
              dialogue: ["Steam power drives progress!", "Mechanical marvels await!", "The future is powered by steam!"],
              shop: [
                { id: 'steam-hammer', name: 'Steam-Powered Hammer', type: 'weapon', price: 280, description: 'Mechanical might', icon: '🔨⚙️' },
                { id: 'gear-armor', name: 'Gear-Work Armor', type: 'armor', price: 250, description: 'Mechanical protection', icon: '⚙️🛡️' }
              ]
            },
            { id: 'west-armorer', name: 'Arsenal-Keep Magnus', type: 'shopkeeper', x: 282, y: 619, sprite: '🛡️', color: '#374151',
              dialogue: ["Military-grade equipment only!", "Arm yourself for serious combat!", "No compromise on protection!"],
              shop: [
                { id: 'tactical-gear', name: 'Tactical Harness', type: 'armor', price: 180, description: 'Combat-tested protection', icon: '🎖️🛡️' },
                { id: 'combat-blade', name: 'Combat Knife', type: 'weapon', price: 120, description: 'Military precision cutting', icon: '🎖️⚔️' }
              ]
            },
            { id: 'west-banker', name: 'Vault-Guard Durin', type: 'banker', x: 124, y: 676, sprite: '🏦', color: '#6b7280',
              dialogue: ["Dwarven vaults are unbreakable!", "Your gold is safer than in the mountains!", "Trust dwarven engineering!"]
            },
            { id: 'west-inn-master', name: 'Industrial Lodge Master', type: 'innkeeper', x: 176, y: 675, sprite: '🏨', color: '#92400e',
              dialogue: ["Rest after hard industrial work!", "Beds built for workers!", "Sleep sound, work strong!"]
            },
            { id: 'west-market-boss', name: 'Trade Hub Director', type: 'shopkeeper', x: 230, y: 677, sprite: '🏬', color: '#0ea5e9',
              dialogue: ["Industrial goods for industrial needs!", "Bulk orders welcome!", "Mass production, mass savings!"],
              shop: [
                { id: 'tool-kit', name: 'Industrial Tool Kit', type: 'misc', price: 60, description: 'Complete tool set', icon: '🧰' },
                { id: 'work-gloves', name: 'Heavy Work Gloves', type: 'armor', price: 25, description: 'Hand protection', icon: '🧤' }
              ]
            },
            { id: 'west-forge-priest', name: 'Forge Priest Hammer', type: 'priest', x: 280, y: 676, sprite: '🔥⛪', color: '#dc2626',
              dialogue: ["Blessed be the forge fires!", "Sacred flames purify metal!", "Work is worship!"]
            },
            { id: 'west-quest-giver', name: 'Engineer Clockwork', type: 'quest-giver', x: 220, y: 670, sprite: '⚙️', color: '#f59e0b',
              dialogue: ["The machines need maintenance!", "Help keep the foundry running!", "Gears and glory await!"]
            },

            // === NEW TOWNS - ADDITIONAL NPCs ===

            // SKYREACH (Northwest) NPCs
            { id: 'sky-king', name: 'Sky King Altitude', type: 'palace', x: 330, y: 222, sprite: '🏰👑', color: '#3b82f6',
              dialogue: ["Welcome to the highest realm!", "Mountain majesty surrounds us!", "Rule from the peaks!"]
            },
            { id: 'mountain-trader', name: 'Highland Merchant', type: 'shopkeeper', x: 397, y: 217, sprite: '🏔️🏬', color: '#059669',
              dialogue: ["Mountain goods for mountain folk!", "High altitude, high quality!", "Peak performance products!"],
              shop: [
                { id: 'mountain-gear', name: 'Climbing Gear', type: 'misc', price: 80, description: 'Scale any height', icon: '🧗' },
                { id: 'peak-boots', name: 'Mountain Peak Boots', type: 'armor', price: 120, description: 'Never lose footing', icon: '🥾⛰️' }
              ]
            },
            { id: 'sky-banker', name: 'Peak Vault Keeper', type: 'banker', x: 450, y: 215, sprite: '🏦⛰️', color: '#6b7280',
              dialogue: ["Highest security at highest altitude!", "Your wealth reaches new heights!", "Peak financial services!"]
            },
            { id: 'eagle-innkeeper', name: 'Eagle\'s Nest Host', type: 'innkeeper', x: 302, y: 266, sprite: '🦅🏨', color: '#92400e',
              dialogue: ["Rest among the clouds!", "Eagle\'s eye view rooms!", "Soar high, sleep well!"]
            },
            { id: 'mountain-priest', name: 'Sky Shrine Keeper', type: 'priest', x: 355, y: 269, sprite: '⛰️⛪', color: '#6b7280',
              dialogue: ["Closer to the heavens here!", "Mountain spirits bless you!", "Peak spirituality!"]
            },

            // STARFALL (Northeast) NPCs
            { id: 'archmage-supreme', name: 'Supreme Archmage', type: 'wizard', x: 1517, y: 180, sprite: '🧙‍♂️✨', color: '#7c3aed',
              dialogue: ["Magic beyond mortal comprehension!", "The tower holds infinite knowledge!", "Ascend to magical mastery!"],
              shop: [
                { id: 'starfall-staff', name: 'Starfall Staff', type: 'weapon', price: 600, description: 'Channel cosmic power', icon: '🌟🪄' },
                { id: 'cosmic-armor', name: 'Cosmic Armor', type: 'armor', price: 500, description: 'Star-blessed protection', icon: '⭐🛡️' }
              ]
            },
            { id: 'academy-headmaster', name: 'Academy Headmaster', type: 'scholar', x: 1572, y: 177, sprite: '🎓', color: '#6366f1',
              dialogue: ["Welcome to magical education!", "Learning never ends here!", "Master the mystical arts!"]
            },
            { id: 'cosmic-librarian', name: 'Cosmic Librarian', type: 'librarian', x: 1635, y: 169, sprite: '📚⭐', color: '#8b5cf6',
              dialogue: ["Stellar knowledge awaits!", "Books from across the cosmos!", "Universal wisdom within!"]
            },
            { id: 'ethereal-merchant', name: 'Ethereal Goods Trader', type: 'shopkeeper', x: 1506, y: 237, sprite: '🔮🏬', color: '#7c3aed',
              dialogue: ["Mystical goods for mystical needs!", "Ethereal quality guaranteed!", "Magic made manifest!"],
              shop: [
                { id: 'ethereal-crystal', name: 'Ethereal Crystal', type: 'misc', price: 150, description: 'Pure magic essence', icon: '🔮✨' },
                { id: 'astral-cloak', name: 'Astral Cloak', type: 'armor', price: 200, description: 'Phase through attacks', icon: '🌟👘' }
              ]
            },

            // EMBERFALL (Southwest) NPCs
            { id: 'volcano-lord', name: 'Volcano Lord Magma', type: 'palace', x: 240, y: 1230, sprite: '🌋👑', color: '#dc2626',
              dialogue: ["Ruler of fire and flame!", "The volcano\'s power is mine!", "Burn bright, rule eternal!"]
            },
            { id: 'lava-forgemaster', name: 'Lava Forge Master', type: 'blacksmith', x: 317, y: 1221, sprite: '🔥🔨', color: '#dc2626',
              dialogue: ["Lava forges the strongest steel!", "Heat beyond imagination!", "Molten metal mastery!"],
              shop: [
                { id: 'lava-sword', name: 'Lava Forged Sword', type: 'weapon', price: 400, description: 'Burns with inner fire', icon: '🔥⚔️' },
                { id: 'magma-armor', name: 'Magma Plate Armor', type: 'armor', price: 450, description: 'Volcanic protection', icon: '🌋🛡️' }
              ]
            },
            { id: 'ember-merchant', name: 'Ember Goods Trader', type: 'shopkeeper', x: 375, y: 1217, sprite: '🔥🏬', color: '#f59e0b',
              dialogue: ["Hot deals on volcanic goods!", "Fiery bargains await!", "Heat up your adventure!"],
              shop: [
                { id: 'fire-crystal', name: 'Fire Crystal', type: 'misc', price: 100, description: 'Concentrated flame', icon: '🔥💎' },
                { id: 'heat-potion', name: 'Heat Resistance Potion', type: 'potion', price: 60, description: 'Protects from fire', icon: '🧪🔥' }
              ]
            },
            { id: 'fire-priest', name: 'Fire Temple Priest', type: 'priest', x: 204, y: 1290, sprite: '🔥⛪', color: '#dc2626',
              dialogue: ["The flames purify all!", "Fire is life, fire is power!", "Blessed by the volcano god!"]
            },

            // CRYSTALDEEP (Southeast) NPCs
            { id: 'crystal-king', name: 'Crystal King Geode', type: 'palace', x: 1437, y: 1327, sprite: '💎👑', color: '#ec4899',
              dialogue: ["Welcome to the crystal realm!", "Gems beyond your imagination!", "Underground majesty!"]
            },
            { id: 'master-miner', name: 'Master Crystal Miner', type: 'miner', x: 1510, y: 1322, sprite: '⛏️💎', color: '#6b7280',
              dialogue: ["Deepest mines, richest veins!", "Crystal formations everywhere!", "Gem mining perfected!"],
              shop: [
                { id: 'pure-crystal', name: 'Pure Crystal', type: 'misc', price: 250, description: 'Flawless gem', icon: '💎✨' },
                { id: 'crystal-pickaxe', name: 'Crystal Pickaxe', type: 'weapon', price: 300, description: 'Mines anything', icon: '⛏️💎' }
              ]
            },
            { id: 'gem-appraiser', name: 'Crystal Appraiser', type: 'shopkeeper', x: 1404, y: 1377, sprite: '💎📊', color: '#ec4899',
              dialogue: ["I know the value of every gem!", "Crystal clarity in pricing!", "Precious stones, precise values!"],
              shop: [
                { id: 'gem-magnifier', name: 'Gem Magnifier', type: 'misc', price: 80, description: 'See gem quality', icon: '🔍💎' },
                { id: 'crystal-dust', name: 'Crystal Dust', type: 'misc', price: 40, description: 'Magical crafting material', icon: '✨💎' }
              ]
            },
            { id: 'earth-priest', name: 'Earth Spirit Priest', type: 'priest', x: 1456, y: 1379, sprite: '🗿⛪', color: '#6b7280',
              dialogue: ["The earth spirits guide us!", "Stone and crystal hold power!", "Deep wisdom from below!"]
            },

            // WINDSPIRE (Central-North) NPCs
            { id: 'sky-city-mayor', name: 'Sky City Administrator', type: 'palace', x: 985, y: 425, sprite: '🏗️👑', color: '#3b82f6',
              dialogue: ["Welcome to the floating city!", "Air travel revolutionized!", "Sky-high innovation!"]
            },
            { id: 'airship-captain', name: 'Airship Fleet Captain', type: 'dock', x: 1052, y: 420, sprite: '✈️⚓', color: '#0ea5e9',
              dialogue: ["The skies are our ocean!", "Airship travel to anywhere!", "Soar above the clouds!"]
            },
            { id: 'cloud-merchant', name: 'Cloud Nine Trader', type: 'shopkeeper', x: 1109, y: 417, sprite: '☁️🏬', color: '#6366f1',
              dialogue: ["Goods from the sky realm!", "High-altitude merchandise!", "Elevated shopping experience!"],
              shop: [
                { id: 'wind-crystal', name: 'Wind Crystal', type: 'misc', price: 120, description: 'Captures air currents', icon: '💨💎' },
                { id: 'feather-cloak', name: 'Featherlight Cloak', type: 'armor', price: 150, description: 'Lighter than air', icon: '🪶👘' }
              ]
            },
            { id: 'wind-priest', name: 'Wind Temple Keeper', type: 'priest', x: 952, y: 475, sprite: '💨⛪', color: '#0ea5e9',
              dialogue: ["The winds carry our prayers!", "Air spirits bless travelers!", "Breathe deep the sacred air!"]
            },

            // SHADOWMERE (Central-South) NPCs
            { id: 'shadow-lord', name: 'Shadow Lord Darkness', type: 'palace', x: 982, y: 1074, sprite: '🖤👑', color: '#1f2937',
              dialogue: ["Welcome to the realm of shadows!", "Darkness is my domain!", "Embrace the night!"]
            },
            { id: 'midnight-merchant', name: 'Midnight Market Master', type: 'shopkeeper', x: 1045, y: 1068, sprite: '🌙🏬', color: '#374151',
              dialogue: ["Dark goods for dark deeds!", "Midnight specials available!", "Shadow commerce thrives!"],
              shop: [
                { id: 'shadow-blade', name: 'Shadow Blade', type: 'weapon', price: 350, description: 'Strikes from darkness', icon: '🌑⚔️' },
                { id: 'night-armor', name: 'Armor of Night', type: 'armor', price: 300, description: 'Blend with shadows', icon: '🖤🛡️' }
              ]
            },
            { id: 'shadow-priest', name: 'Shadow Priest Void', type: 'priest', x: 1097, y: 1071, sprite: '🌑⛪', color: '#1f2937',
              dialogue: ["Darkness brings peace!", "Shadows hide truth!", "Night eternal!"]
            },
            { id: 'raven-innkeeper', name: 'Raven\'s Rest Keeper', type: 'innkeeper', x: 952, y: 1121, sprite: '🐦‍⬛🏨', color: '#374151',
              dialogue: ["Rest in the embrace of night!", "Dark comfort awaits!", "Sleep deep in shadow!"]
            },
            { id: 'void-banker', name: 'Void Vault Guardian', type: 'banker', x: 999, y: 1119, sprite: '🖤🏦', color: '#1f2937',
              dialogue: ["Your wealth disappears into safety!", "Void security never fails!", "Darkness protects all!"]
            },
            { id: 'dark-arena-master', name: 'Dark Arena Champion', type: 'trainer', x: 1049, y: 1122, sprite: '🌑🏟️', color: '#374151',
              dialogue: ["Combat in the shadows!", "Darkness tests the strong!", "Fight where light fails!"]
            },

            // === SCATTERED ADDITIONAL NPCs ACROSS THE WORLD ===
            
            // More Roaming NPCs
            { id: 'wandering-bard', name: 'Wandering Bard Melody', type: 'entertainer', x: 600, y: 800, sprite: '🎵', color: '#ec4899',
              dialogue: ["Songs of distant lands!", "Music connects all souls!", "What tale shall I tell?"]
            },
            { id: 'traveling-cook', name: 'Chef Wanderlust', type: 'cook', x: 800, y: 600, sprite: '👨‍🍳🚛', color: '#f59e0b',
              dialogue: ["Mobile kitchen, maximum flavor!", "Food truck of the realm!", "Gourmet on the go!"],
              shop: [
                { id: 'travel-rations', name: 'Gourmet Travel Rations', type: 'food', price: 20, description: 'Delicious and filling', icon: '🍽️' },
                { id: 'energy-drink', name: 'Adventurer Energy Drink', type: 'drink', price: 15, description: 'Instant energy boost', icon: '⚡🥤' }
              ]
            },
            { id: 'hermit-sage', name: 'Hermit Sage Wisdom', type: 'scholar', x: 1800, y: 200, sprite: '🧙‍♂️', color: '#6b7280',
              dialogue: ["Solitude breeds understanding!", "Years of study reveal truth!", "Knowledge is eternal!"]
            },
            { id: 'lost-knight', name: 'Lost Knight Valor', type: 'guard', x: 400, y: 1000, sprite: '⚔️🛡️', color: '#3b82f6',
              dialogue: ["Honor guides my path!", "Lost but not defeated!", "Justice never wavers!"]
            },
            { id: 'treasure-hunter', name: 'Treasure Hunter Gold', type: 'quest-giver', x: 1600, y: 900, sprite: '💰🗺️', color: '#fbbf24',
              dialogue: ["Treasure maps for sale!", "Adventure leads to riches!", "X marks the spot!"]
            },
            { id: 'weather-mage', name: 'Weather Mage Storm', type: 'wizard', x: 700, y: 300, sprite: '🌦️🧙', color: '#0ea5e9',
              dialogue: ["I command the elements!", "Weather bends to my will!", "Storm and sunshine obey!"],
              shop: [
                { id: 'storm-scroll', name: 'Storm Scroll', type: 'scroll', price: 120, description: 'Summons lightning', icon: '⛈️📜' },
                { id: 'weather-charm', name: 'Weather Protection Charm', type: 'misc', price: 80, description: 'Blocks weather effects', icon: '🌦️🧿' }
              ]
            },
            { id: 'beast-tamer', name: 'Beast Tamer Wild', type: 'stable', x: 300, y: 800, sprite: '🦁', color: '#f59e0b',
              dialogue: ["All creatures answer my call!", "Wild beasts become loyal friends!", "Nature\'s bonds run deep!"]
            },
            { id: 'crystal-seer', name: 'Crystal Seer Future', type: 'fortune-teller', x: 1200, y: 400, sprite: '🔮✨', color: '#8b5cf6',
              dialogue: ["Crystals reveal hidden truths!", "The future crystallizes before us!", "Clarity through crystal gazing!"]
            },
            { id: 'plague-doctor', name: 'Plague Doctor Cure', type: 'healer', x: 500, y: 700, sprite: '🩺⚫', color: '#1f2937',
              dialogue: ["All ailments have remedies!", "Disease fears my expertise!", "Health through science!"],
              shop: [
                { id: 'antidote-superior', name: 'Superior Antidote', type: 'potion', price: 50, description: 'Cures any poison', icon: '🧪' },
                { id: 'healing-salve', name: 'Healing Salve', type: 'potion', price: 30, description: 'Heals wounds over time', icon: '🩹' }
              ]
            },
            { id: 'time-keeper', name: 'Time Keeper Chronos', type: 'scholar', x: 1000, y: 1200, sprite: '⏰', color: '#6366f1',
              dialogue: ["Time reveals all secrets!", "Past, present, future converge!", "Temporal wisdom guides us!"]
            },
            { id: 'dream-weaver', name: 'Dream Weaver Sleep', type: 'wizard', x: 1400, y: 800, sprite: '😴🌙', color: '#7c3aed',
              dialogue: ["Dreams and reality intertwine!", "Sleep brings visions of power!", "Unconscious wisdom awaits!"],
              shop: [
                { id: 'sleep-potion', name: 'Dream Potion', type: 'potion', price: 40, description: 'Induces prophetic dreams', icon: '😴💤' },
                { id: 'nightmare-ward', name: 'Nightmare Ward', type: 'misc', price: 60, description: 'Protects from bad dreams', icon: '🛡️💤' }
              ]
            }
        ];

        const SPAWN_POINTS = [
            { x: 1000, y: 750 },  // Center of massive world
            { x: 998, y: 750 },   // Spread around center
            { x: 1002, y: 750 },
            { x: 1000, y: 748 },
            { x: 1000, y: 752 }
        ];

        // Generate MASSIVE world map - the biggest MMORPG map ever created
        function createWorldMap() {
            const map = [];
            
            // Define town centers for path connections (updated with new compact positions)
            const townCenters = {
                central: { x: 990, y: 740 },
                northern: { x: 930, y: 155 }, 
                southern: { x: 990, y: 1355 },
                eastern: { x: 1650, y: 640 },
                western: { x: 150, y: 585 }
            };
            
            // Create massive terrain diversity
            for (let y = 0; y < WORLD_HEIGHT; y++) {
                const row = [];
                for (let x = 0; x < WORLD_WIDTH; x++) {
                    // Create diverse biomes and regions across the massive world
                    const centerX = WORLD_WIDTH / 2;
                    const centerY = WORLD_HEIGHT / 2;
                    const distanceFromCenter = Math.sqrt((x - centerX) * (x - centerX) + (y - centerY) * (y - centerY));
                    const maxDistance = Math.sqrt(centerX * centerX + centerY * centerY);
                    const normalizedDistance = distanceFromCenter / maxDistance;
                    
                    // Noise-based terrain generation for variety
                    const noise1 = Math.sin(x * 0.01) * Math.cos(y * 0.01);
                    const noise2 = Math.sin(x * 0.05) * Math.cos(y * 0.03);
                    const noise3 = Math.sin(x * 0.02) * Math.cos(y * 0.04);
                    const combinedNoise = (noise1 + noise2 * 0.5 + noise3 * 0.3) / 1.8;
                    
                    // Check if this tile is on a connecting path between towns
                    let isOnPath = false;
                    
                    // Central to Northern path (north-south road)
                    if (x >= townCenters.central.x - 2 && x <= townCenters.central.x + 2 && 
                        y >= townCenters.northern.y && y <= townCenters.central.y) {
                        isOnPath = true;
                    }
                    
                    // Central to Southern path (north-south road)
                    if (x >= townCenters.central.x - 2 && x <= townCenters.central.x + 2 && 
                        y >= townCenters.central.y && y <= townCenters.southern.y) {
                        isOnPath = true;
                    }
                    
                    // Central to Eastern path (east-west road)
                    if (y >= townCenters.central.y - 2 && y <= townCenters.central.y + 2 && 
                        x >= townCenters.central.x && x <= townCenters.eastern.x) {
                        isOnPath = true;
                    }
                    
                    // Central to Western path (east-west road)  
                    if (y >= townCenters.central.y - 2 && y <= townCenters.central.y + 2 && 
                        x >= townCenters.western.x && x <= townCenters.central.x) {
                        isOnPath = true;
                    }
                    
                    // If on a connecting path, make it stone road
                    if (isOnPath) {
                        row.push(TILES.stone);
                    }
                    // World boundaries
                    else if (y < 3 || y >= WORLD_HEIGHT - 3 || x < 3 || x >= WORLD_WIDTH - 3) {
                        row.push(TILES.water);  // Ocean boundaries
                    }
                    // Town areas - add some grass around compact towns with natural scenery
                    else if ((x >= 965 && x <= 1015 && y >= 710 && y <= 765) ||  // Central town area with buffer
                            (x >= 910 && x <= 955 && y >= 130 && y <= 180) ||    // Northern town area with buffer
                            (x >= 965 && x <= 1015 && y >= 1330 && y <= 1385) || // Southern town area with buffer
                            (x >= 1625 && x <= 1685 && y >= 615 && y <= 680) ||  // Eastern town area with buffer
                            (x >= 125 && x <= 185 && y >= 560 && y <= 620)) {    // Western town area with buffer
                        // Add natural scenery around towns
                        const townNoise = Math.sin(x * 0.3) * Math.cos(y * 0.3);
                        if (townNoise > 0.4) row.push(TILES.stone); // Trees represented as stone
                        else if (townNoise < -0.3) row.push(TILES.dirt); // Bushes represented as dirt
                        else if ((x + y) % 12 === 0) row.push(TILES.stone); // Stone paths within towns
                        else row.push(TILES.grass);
                    }
                    // Diverse biomes based on position and noise
                    else if (normalizedDistance < 0.3) {
                        // Inner regions - grasslands and forests
                        if (combinedNoise > 0.2) row.push(TILES.stone);
                        else if (combinedNoise < -0.3) row.push(TILES.dirt);
                        else row.push(TILES.grass);
                    }
                    else if (normalizedDistance < 0.6) {
                        // Middle regions - mixed terrain
                        if (combinedNoise > 0.4) row.push(TILES.stone);
                        else if (combinedNoise > 0.1) row.push(TILES.dirt);
                        else if (combinedNoise < -0.2) row.push(TILES.water);
                        else row.push(TILES.grass);
                    }
                    else {
                        // Outer regions - wilderness and dangerous areas
                        if (combinedNoise > 0.3) row.push(TILES.stone);
                        else if (combinedNoise > -0.1) row.push(TILES.dirt);
                        else if (combinedNoise < -0.4) row.push(TILES.water);
                        else row.push(TILES.grass);
                    }
                }
                map.push(row);
            }
            return map;
        }

        const worldMap = createWorldMap();

        // Utility Functions
        function getClassStats(playerClass) {
            switch (playerClass) {
                case 'warrior': return { health: 120, mana: 30 };
                case 'mage': return { health: 80, mana: 100 };
                case 'archer': return { health: 100, mana: 50 };
                default: return { health: 100, mana: 50 };
            }
        }

        function getClassColor(playerClass) {
            switch (playerClass) {
                case 'warrior': return '#ef4444';
                case 'mage': return '#3b82f6';
                case 'archer': return '#10b981';
                default: return '#6b7280';
            }
        }

        function getClassIcon(playerClass) {
            switch (playerClass) {
                case 'warrior': return '⚔';
                case 'mage': return '✦';
                case 'archer': return '➵';
                default: return '●';
            }
        }

        function canMoveTo(x, y) {
            const tileX = Math.floor(x / TILE_SIZE);
            const tileY = Math.floor(y / TILE_SIZE);
            
            if (tileX < 0 || tileX >= WORLD_WIDTH || tileY < 0 || tileY >= WORLD_HEIGHT) {
                return false;
            }
            
            return worldMap[tileY][tileX].walkable;
        }

        function lightenColor(color, amount) {
            if (color.startsWith('#')) {
                const r = parseInt(color.slice(1, 3), 16);
                const g = parseInt(color.slice(3, 5), 16);
                const b = parseInt(color.slice(5, 7), 16);
                const newR = Math.min(255, r + amount * 255);
                const newG = Math.min(255, g + amount * 255);
                const newB = Math.min(255, b + amount * 255);
                return `rgb(${newR}, ${newG}, ${newB})`;
            }
            return color;
        }

        function darkenColor(color, amount) {
            if (color.startsWith('#')) {
                const r = parseInt(color.slice(1, 3), 16);
                const g = parseInt(color.slice(3, 5), 16);
                const b = parseInt(color.slice(5, 7), 16);
                const newR = Math.max(0, r - amount * 255);
                const newG = Math.max(0, g - amount * 255);
                const newB = Math.max(0, b - amount * 255);
                return `rgb(${newR}, ${newG}, ${newB})`;
            }
            return color;
        }

        // Game Functions
        async function initializePlayer(name, playerClass) {
            const spawnPoint = SPAWN_POINTS[Math.floor(Math.random() * SPAWN_POINTS.length)];
            const stats = getClassStats(playerClass);
            
            const newPlayer = {
                name,
                x: spawnPoint.x * TILE_SIZE,
                y: spawnPoint.y * TILE_SIZE,
                health: stats.health,
                maxHealth: stats.health,
                mana: stats.mana,
                maxMana: stats.mana,
                xp: 0,
                maxXp: 100,
                level: 1,
                class: playerClass,
                color: getClassColor(playerClass),
                isMoving: false,
                direction: 'down',
                gold: 100,
                inventory: []
            };

            try {
                const { data, error } = await supabase
                    .from('players')
                    .insert({
                        username: name,
                        x: newPlayer.x,
                        y: newPlayer.y,
                        health: newPlayer.health,
                        max_health: newPlayer.maxHealth,
                        mana: newPlayer.mana,
                        max_mana: newPlayer.maxMana,
                        level: newPlayer.level,
                        player_class: playerClass,
                        color: newPlayer.color,
                        direction: newPlayer.direction,
                        is_moving: false,
                        gold: newPlayer.gold,
                        zone_id: 'main-town'
                    })
                    .select()
                    .single();

                if (error) throw error;

                gameState.currentPlayer = {
                    id: data.id,
                    name: data.username,
                    x: data.x,
                    y: data.y,
                    health: data.health,
                    maxHealth: data.max_health,
                    mana: data.mana,
                    maxMana: data.max_mana,
                    level: data.level,
                    class: data.player_class,
                    color: data.color,
                    isMoving: data.is_moving,
                    direction: data.direction,
                    gold: data.gold,
                    inventory: []
                };

                gameState.isConnected = true;
                showGameUI();
                updatePlayerStats();
                setupRealtimeSubscriptions();
                loadInitialData();
                startGameLoop();
            } catch (error) {
                console.error('Error creating player:', error);
                alert('Failed to create player. Please try again.');
            }
        }

        function showGameUI() {
            document.getElementById('characterSelect').classList.add('hidden');
            document.getElementById('playerStats').classList.remove('hidden');
            document.getElementById('minimapPanel').classList.remove('hidden');
            document.getElementById('chatPanel').classList.remove('hidden');
            document.getElementById('controlsPanel').classList.remove('hidden');
        }

        function updatePlayerStats() {
            if (!gameState.currentPlayer) return;
            
            const player = gameState.currentPlayer;
            document.getElementById('playerNameDisplay').textContent = player.name;
            document.getElementById('playerClassDisplay').textContent = `Level ${player.level} ${player.class}`;
            document.getElementById('healthDisplay').textContent = `${player.health}/${player.maxHealth}`;
            document.getElementById('manaDisplay').textContent = `${player.mana}/${player.maxMana}`;
            document.getElementById('goldDisplay').textContent = player.gold;
            
            const healthPercent = (player.health / player.maxHealth) * 100;
            const manaPercent = (player.mana / player.maxMana) * 100;
            
            document.getElementById('healthBar').style.width = `${healthPercent}%`;
            document.getElementById('manaBar').style.width = `${manaPercent}%`;
        }

        function updateMinimap() {
            const minimap = document.getElementById('minimap');
            const playerCount = document.getElementById('playerCount');
            
            minimap.innerHTML = '';
            playerCount.textContent = Object.keys(gameState.players).length;
            
            const minimapRadius = 60; // Half of 120px
            const worldScale = minimapRadius / Math.max(WORLD_WIDTH, WORLD_HEIGHT);
            
            // Draw terrain features
            // Sample some buildings and terrain for the minimap
            BUILDINGS.forEach(building => {
                if (Math.random() < 0.3) { // Show only some buildings to avoid clutter
                    const terrainDot = document.createElement('div');
                    terrainDot.className = 'minimap-terrain';
                    terrainDot.style.backgroundColor = getBuildingColor(building.type);
                    terrainDot.style.width = '2px';
                    terrainDot.style.height = '2px';
                    terrainDot.style.opacity = '0.6';
                    
                    const x = building.x * worldScale;
                    const y = building.y * worldScale;
                    terrainDot.style.left = `${minimapRadius + x}px`;
                    terrainDot.style.top = `${minimapRadius + y}px`;
                    terrainDot.style.position = 'absolute';
                    
                    minimap.appendChild(terrainDot);
                }
            });
            
            // Add some terrain variety
            for (let i = 0; i < 50; i++) {
                const terrainDot = document.createElement('div');
                terrainDot.className = 'minimap-terrain';
                terrainDot.style.backgroundColor = Math.random() < 0.5 ? '#10b981' : '#64748b';
                terrainDot.style.width = '1px';
                terrainDot.style.height = '1px';
                terrainDot.style.opacity = '0.3';
                
                const x = (Math.random() * WORLD_WIDTH) * worldScale;
                const y = (Math.random() * WORLD_HEIGHT) * worldScale;
                terrainDot.style.left = `${minimapRadius + x}px`;
                terrainDot.style.top = `${minimapRadius + y}px`;
                terrainDot.style.position = 'absolute';
                
                minimap.appendChild(terrainDot);
            }
            
            // Current player first
            if (gameState.currentPlayer) {
                const playerDot = document.createElement('div');
                playerDot.className = 'minimap-player';
                playerDot.style.backgroundColor = gameState.currentPlayer.color;
                playerDot.style.border = '1px solid #10b981';
                playerDot.style.width = '5px';
                playerDot.style.height = '5px';
                
                const x = (gameState.currentPlayer.x / TILE_SIZE) * worldScale;
                const y = (gameState.currentPlayer.y / TILE_SIZE) * worldScale;
                playerDot.style.left = `${minimapRadius + x}px`;
                playerDot.style.top = `${minimapRadius + y}px`;
                
                minimap.appendChild(playerDot);
            }
            
            // Other players
            Object.values(gameState.players).forEach(player => {
                if (player.id !== gameState.currentPlayer?.id) {
                    const playerDot = document.createElement('div');
                    playerDot.className = 'minimap-player';
                    playerDot.style.backgroundColor = player.color;
                    
                    const x = (player.x / TILE_SIZE) * worldScale;
                    const y = (player.y / TILE_SIZE) * worldScale;
                    playerDot.style.left = `${minimapRadius + x}px`;
                    playerDot.style.top = `${minimapRadius + y}px`;
                    
                    minimap.appendChild(playerDot);
                }
            });
        }

        function addChatMessage(message) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message';
            messageDiv.innerHTML = `
                <span class="username">${message.username}:</span> ${message.message}
            `;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Keep only last 20 messages
            while (chatMessages.children.length > 20) {
                chatMessages.removeChild(chatMessages.firstChild);
            }
        }

        async function sendMessage(message) {
            if (!gameState.currentPlayer || !message.trim()) return;

            try {
                await supabase
                    .from('chat_messages')
                    .insert({
                        player_id: gameState.currentPlayer.id,
                        username: gameState.currentPlayer.name,
                        message: message.trim(),
                        zone_id: 'main-town'
                    });
            } catch (error) {
                console.error('Error sending message:', error);
            }
        }

        async function updatePlayerPosition(player) {
            if (!player.id) return;

            try {
                await supabase
                    .from('players')
                    .update({
                        x: player.x,
                        y: player.y,
                        direction: player.direction,
                        is_moving: player.isMoving,
                        last_seen: new Date().toISOString()
                    })
                    .eq('id', player.id);
            } catch (error) {
                console.error('Error updating player position:', error);
            }
        }

        function checkInteractions(playerX, playerY) {
            const playerTileX = Math.round(playerX / TILE_SIZE);
            const playerTileY = Math.round(playerY / TILE_SIZE);
            
            for (const npc of NPCS) {
                const distance = Math.abs(npc.x - playerTileX) + Math.abs(npc.y - playerTileY);
                if (distance <= 1) {
                    return { type: 'npc', target: npc };
                }
            }
            
            return null;
        }

        function showInteractionDialog(npc) {
            gameState.interactionTarget = npc;
            
            document.getElementById('npcName').textContent = npc.name;
            document.getElementById('npcDialogue').textContent = npc.dialogue[0];
            
            const shopItems = document.getElementById('shopItems');
            shopItems.innerHTML = '';
            
            if (npc.shop && npc.shop.length > 0) {
                shopItems.classList.remove('hidden');
                npc.shop.forEach(item => {
                    const itemDiv = document.createElement('div');
                    itemDiv.className = 'shop-item';
                    itemDiv.innerHTML = `
                        <div>
                            <strong>${item.icon} ${item.name}</strong>
                            <div style="font-size: 11px; color: hsl(120, 20%, 65%);">${item.description}</div>
                        </div>
                        <div>
                            <div style="color: hsl(60, 100%, 50%); font-weight: bold;">${item.price} Gold</div>
                            <button onclick="purchaseItem('${item.id}')" style="margin-top: 4px; padding: 4px 8px; font-size: 11px;">Buy</button>
                        </div>
                    `;
                    shopItems.appendChild(itemDiv);
                });
            } else {
                shopItems.classList.add('hidden');
            }
            
            document.getElementById('interactionOverlay').classList.remove('hidden');
            document.getElementById('interactionDialog').classList.remove('hidden');
        }

        function closeInteractionDialog() {
            document.getElementById('interactionOverlay').classList.add('hidden');
            document.getElementById('interactionDialog').classList.add('hidden');
            gameState.interactionTarget = null;
        }

        async function purchaseItem(itemId) {
            if (!gameState.interactionTarget || !gameState.currentPlayer) return;
            
            const item = gameState.interactionTarget.shop?.find(i => i.id === itemId);
            if (!item) return;
            
            if (gameState.currentPlayer.gold >= item.price) {
                // Update gold locally
                gameState.currentPlayer.gold -= item.price;
                updatePlayerStats();
                
                // Send chat message about purchase
                await sendMessage(`Purchased ${item.name} for ${item.price} gold!`);
                
                // Update player in database
                try {
                    await supabase
                        .from('players')
                        .update({ gold: gameState.currentPlayer.gold })
                        .eq('id', gameState.currentPlayer.id);
                } catch (error) {
                    console.error('Error updating gold:', error);
                }
                
                closeInteractionDialog();
            } else {
                alert('Not enough gold!');
            }
        }

        async function loadInitialData() {
            // Load players
            const { data: playersData } = await supabase
                .from('players')
                .select('*')
                .eq('zone_id', 'main-town');

            if (playersData) {
                playersData.forEach(dbPlayer => {
                    gameState.players[dbPlayer.id] = {
                        id: dbPlayer.id,
                        name: dbPlayer.username,
                        x: dbPlayer.x,
                        y: dbPlayer.y,
                        displayX: dbPlayer.x,  // Visual position for smooth interpolation
                        displayY: dbPlayer.y,  // Visual position for smooth interpolation
                        targetX: dbPlayer.x,   // Target position from server
                        targetY: dbPlayer.y,   // Target position from server
                        health: dbPlayer.health,
                        maxHealth: dbPlayer.max_health,
                        mana: dbPlayer.mana,
                        maxMana: dbPlayer.max_mana,
                        level: dbPlayer.level,
                        class: dbPlayer.player_class,
                        color: dbPlayer.color,
                        isMoving: dbPlayer.is_moving,
                        direction: dbPlayer.direction,
                        gold: dbPlayer.gold,
                        inventory: []
                    };
                });
                updateMinimap();
            }

            // Load recent messages
            const { data: messagesData } = await supabase
                .from('chat_messages')
                .select('*')
                .eq('zone_id', 'main-town')
                .order('created_at', { ascending: false })
                .limit(20);

            if (messagesData) {
                messagesData.reverse().forEach(msg => {
                    addChatMessage({
                        id: msg.id,
                        username: msg.username,
                        message: msg.message,
                        created_at: msg.created_at,
                        zone_id: msg.zone_id
                    });
                });
            }
        }

        function setupRealtimeSubscriptions() {
            // Subscribe to player updates
            supabase
                .channel('players')
                .on(
                    'postgres_changes',
                    {
                        event: '*',
                        schema: 'public',
                        table: 'players',
                        filter: 'zone_id=eq.main-town'
                    },
                    (payload) => {
                        if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE') {
                            const dbPlayer = payload.new;
                            const existingPlayer = gameState.players[dbPlayer.id];
                            
                            if (existingPlayer) {
                                // Update target position for smooth interpolation
                                existingPlayer.targetX = dbPlayer.x;
                                existingPlayer.targetY = dbPlayer.y;
                                existingPlayer.x = dbPlayer.x;
                                existingPlayer.y = dbPlayer.y;
                                existingPlayer.health = dbPlayer.health;
                                existingPlayer.maxHealth = dbPlayer.max_health;
                                existingPlayer.mana = dbPlayer.mana;
                                existingPlayer.maxMana = dbPlayer.max_mana;
                                existingPlayer.level = dbPlayer.level;
                                existingPlayer.class = dbPlayer.player_class;
                                existingPlayer.color = dbPlayer.color;
                                existingPlayer.isMoving = dbPlayer.is_moving;
                                existingPlayer.direction = dbPlayer.direction;
                                existingPlayer.gold = dbPlayer.gold;
                            } else {
                                // New player - initialize with smooth movement properties
                                gameState.players[dbPlayer.id] = {
                                    id: dbPlayer.id,
                                    name: dbPlayer.username,
                                    x: dbPlayer.x,
                                    y: dbPlayer.y,
                                    displayX: dbPlayer.x,
                                    displayY: dbPlayer.y,
                                    targetX: dbPlayer.x,
                                    targetY: dbPlayer.y,
                                    health: dbPlayer.health,
                                    maxHealth: dbPlayer.max_health,
                                    mana: dbPlayer.mana,
                                    maxMana: dbPlayer.max_mana,
                                    level: dbPlayer.level,
                                    class: dbPlayer.player_class,
                                    color: dbPlayer.color,
                                    isMoving: dbPlayer.is_moving,
                                    direction: dbPlayer.direction,
                                    gold: dbPlayer.gold,
                                    inventory: []
                                };
                            }
                            updateMinimap();
                        } else if (payload.eventType === 'DELETE') {
                            delete gameState.players[payload.old.id];
                            updateMinimap();
                        }
                    }
                )
                .subscribe();

            // Subscribe to chat messages
            supabase
                .channel('chat_messages')
                .on(
                    'postgres_changes',
                    {
                        event: 'INSERT',
                        schema: 'public',
                        table: 'chat_messages',
                        filter: 'zone_id=eq.main-town'
                    },
                    (payload) => {
                        addChatMessage({
                            id: payload.new.id,
                            username: payload.new.username,
                            message: payload.new.message,
                            created_at: payload.new.created_at,
                            zone_id: payload.new.zone_id
                        });
                    }
                )
                .subscribe();
        }

        // Smooth movement interpolation for other players
        function updatePlayerInterpolation(deltaTime) {
            const interpolationSpeed = MOVE_SPEED * 2.5; // Slightly faster than actual movement for responsiveness
            
            Object.values(gameState.players).forEach(player => {
                // Skip current player - they move instantly
                if (gameState.currentPlayer && player.id === gameState.currentPlayer.id) return;
                
                // Initialize display position if not set
                if (player.displayX === undefined) player.displayX = player.x;
                if (player.displayY === undefined) player.displayY = player.y;
                if (player.targetX === undefined) player.targetX = player.x;
                if (player.targetY === undefined) player.targetY = player.y;
                
                // Smoothly interpolate display position toward target
                const distanceX = player.targetX - player.displayX;
                const distanceY = player.targetY - player.displayY;
                const totalDistance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
                
                if (totalDistance > 1) { // Only interpolate if there's meaningful distance
                    const moveAmount = Math.min(interpolationSpeed * deltaTime, totalDistance);
                    const moveX = (distanceX / totalDistance) * moveAmount;
                    const moveY = (distanceY / totalDistance) * moveAmount;
                    
                    player.displayX += moveX;
                    player.displayY += moveY;
                } else {
                    // Close enough - snap to target
                    player.displayX = player.targetX;
                    player.displayY = player.targetY;
                }
            });
        }

        // Game Loop
        let updateTimeout;
        let animationFrame;

        function startGameLoop() {
            const gameLoop = () => {
                const now = Date.now();
                const deltaTime = (now - gameState.lastUpdate) / 1000;
                gameState.lastUpdate = now;

                if (gameState.currentPlayer) {
                    let newX = gameState.currentPlayer.x;
                    let newY = gameState.currentPlayer.y;
                    let isMoving = false;
                    let direction = gameState.currentPlayer.direction;

                    const moveDistance = MOVE_SPEED * deltaTime;
                    
                    if (gameState.keys.w || gameState.keys.arrowup) {
                        const testY = Math.max(TILE_SIZE, newY - moveDistance);
                        if (canMoveTo(newX, testY)) {
                            newY = testY;
                            isMoving = true;
                            direction = 'up';
                        }
                    }
                    if (gameState.keys.s || gameState.keys.arrowdown) {
                        const testY = Math.min((WORLD_HEIGHT - 1) * TILE_SIZE, newY + moveDistance);
                        if (canMoveTo(newX, testY)) {
                            newY = testY;
                            isMoving = true;
                            direction = 'down';
                        }
                    }
                    if (gameState.keys.a || gameState.keys.arrowleft) {
                        const testX = Math.max(TILE_SIZE, newX - moveDistance);
                        if (canMoveTo(testX, newY)) {
                            newX = testX;
                            isMoving = true;
                            direction = 'left';
                        }
                    }
                    if (gameState.keys.d || gameState.keys.arrowright) {
                        const testX = Math.min((WORLD_WIDTH - 1) * TILE_SIZE, newX + moveDistance);
                        if (canMoveTo(testX, newY)) {
                            newX = testX;
                            isMoving = true;
                            direction = 'right';
                        }
                    }

                    // Update player if position changed
                    if (newX !== gameState.currentPlayer.x || newY !== gameState.currentPlayer.y || isMoving !== gameState.currentPlayer.isMoving) {
                        gameState.currentPlayer.x = newX;
                        gameState.currentPlayer.y = newY;
                        gameState.currentPlayer.isMoving = isMoving;
                        gameState.currentPlayer.direction = direction;
                        
                        // Throttle database updates
                        if (updateTimeout) {
                            clearTimeout(updateTimeout);
                        }
                        updateTimeout = setTimeout(() => {
                            updatePlayerPosition(gameState.currentPlayer);
                        }, UPDATE_INTERVAL);
                    }
                }

                // Update smooth interpolation for other players
                updatePlayerInterpolation(deltaTime);
                
                // Render the game
                render();
                
                gameState.animationFrame += 0.1;
                animationFrame = requestAnimationFrame(gameLoop);
            };

            animationFrame = requestAnimationFrame(gameLoop);
        }

        // Rendering
        function render() {
            const canvas = document.getElementById('gameCanvas');
            const ctx = canvas.getContext('2d');
            
            // Clear canvas with gradient background
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, 'hsl(220, 13%, 8%)');
            gradient.addColorStop(1, 'hsl(220, 13%, 12%)');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Calculate camera offset - PERFECT CENTERING
            let cameraX = 0;
            let cameraY = 0;
            
            if (gameState.currentPlayer) {
                // Center the player EXACTLY in the middle of the screen
                cameraX = canvas.width / 2 - gameState.currentPlayer.x - TILE_SIZE / 2;
                cameraY = canvas.height / 2 - gameState.currentPlayer.y - TILE_SIZE / 2;
                
                // For massive open world, allow free camera movement in all directions
                // Only clamp when near world boundaries to prevent seeing beyond the map
                const worldWidthPixels = WORLD_WIDTH * TILE_SIZE;
                const worldHeightPixels = WORLD_HEIGHT * TILE_SIZE;
                
                const minCameraX = canvas.width - worldWidthPixels;
                const minCameraY = canvas.height - worldHeightPixels;
                
                // Only clamp if we're near the edges of the massive world
                if (worldWidthPixels > canvas.width) {
                    cameraX = Math.min(0, Math.max(minCameraX, cameraX));
                }
                if (worldHeightPixels > canvas.height) {
                    cameraY = Math.min(0, Math.max(minCameraY, cameraY));
                }
            }

            ctx.save();
            ctx.translate(cameraX, cameraY);

            // Draw tiles
            drawTiles(ctx);
            
            // Draw buildings
            BUILDINGS.forEach(building => drawBuilding(ctx, building));
            
            // Draw NPCs
            NPCS.forEach(npc => drawNPC(ctx, npc));
            
            // Draw players
            Object.values(gameState.players).forEach(player => {
                const isCurrentPlayer = gameState.currentPlayer && player.id === gameState.currentPlayer.id;
                drawPlayer(ctx, player, isCurrentPlayer);
            });

            ctx.restore();
        }

        function drawTiles(ctx) {
            // OPTIMIZED RENDERING for massive world - only draw visible tiles
            const canvas = document.getElementById('gameCanvas');
            
            // Calculate current camera transform
            const transform = ctx.getTransform();
            const viewX = -transform.e;
            const viewY = -transform.f;
            const viewWidth = canvas.width;
            const viewHeight = canvas.height;
            
            // Calculate visible tile bounds with some padding
            const startX = Math.max(0, Math.floor(viewX / TILE_SIZE) - 2);
            const endX = Math.min(WORLD_WIDTH, Math.ceil((viewX + viewWidth) / TILE_SIZE) + 2);
            const startY = Math.max(0, Math.floor(viewY / TILE_SIZE) - 2);
            const endY = Math.min(WORLD_HEIGHT, Math.ceil((viewY + viewHeight) / TILE_SIZE) + 2);
            
            // Only render visible tiles for performance in massive world
            for (let y = startY; y < endY; y++) {
                for (let x = startX; x < endX; x++) {
                    const tile = worldMap[y][x];
                    const tileX = x * TILE_SIZE;
                    const tileY = y * TILE_SIZE;

                    // Create gradient for tiles
                    const gradient = ctx.createRadialGradient(
                        tileX + TILE_SIZE/2, tileY + TILE_SIZE/2, 0,
                        tileX + TILE_SIZE/2, tileY + TILE_SIZE/2, TILE_SIZE/2
                    );

                    if (tile.type === 'water') {
                        const wave = Math.sin(gameState.animationFrame + x * 0.5 + y * 0.3) * 0.2;
                        gradient.addColorStop(0, `hsl(200, 100%, ${50 + wave * 10}%)`);
                        gradient.addColorStop(1, `hsl(200, 100%, ${40 + wave * 5}%)`);
                    } else {
                        gradient.addColorStop(0, tile.color);
                        gradient.addColorStop(1, darkenColor(tile.color, 0.2));
                    }

                    ctx.fillStyle = gradient;
                    ctx.fillRect(tileX, tileY, TILE_SIZE, TILE_SIZE);

                    // Add texture for grass
                    if (tile.type === 'grass') {
                        ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
                        for (let i = 0; i < 2; i++) {
                            const px = tileX + Math.random() * TILE_SIZE;
                            const py = tileY + Math.random() * TILE_SIZE;
                            ctx.fillRect(px, py, 1, 1);
                        }
                    }

                    // Tile borders
                    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
                    ctx.lineWidth = 0.5;
                    ctx.strokeRect(tileX, tileY, TILE_SIZE, TILE_SIZE);
                }
            }
        }

        function drawBuilding(ctx, building) {
            const x = building.x * TILE_SIZE;
            const y = building.y * TILE_SIZE;
            const w = building.width * TILE_SIZE;
            const h = building.height * TILE_SIZE;

            // Shadow
            ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';
            ctx.fillRect(x + 4, y + 4, w, h);

            // Building gradient
            const gradient = ctx.createLinearGradient(x, y, x + w, y + h);
            const buildingColor = getBuildingColor(building.type);
            gradient.addColorStop(0, buildingColor);
            gradient.addColorStop(1, darkenColor(buildingColor, 0.3));
            
            ctx.fillStyle = gradient;
            ctx.fillRect(x, y, w, h);

            // Border with glow
            ctx.shadowColor = buildingColor;
            ctx.shadowBlur = 10;
            ctx.strokeStyle = lightenColor(buildingColor, 0.3);
            ctx.lineWidth = 2;
            ctx.strokeRect(x, y, w, h);
            ctx.shadowBlur = 0;

            // Icon
            ctx.save();
            ctx.shadowColor = '#ffffff';
            ctx.shadowBlur = 5;
            ctx.fillStyle = '#ffffff';
            ctx.font = `${Math.min(w, h) * 0.3}px Arial`;
            ctx.textAlign = 'center';
            ctx.fillText(building.icon, x + w / 2, y + h / 2 + 6);
            ctx.restore();

            // Name
            ctx.save();
            ctx.shadowColor = '#10b981';
            ctx.shadowBlur = 3;
            ctx.fillStyle = '#10b981';
            ctx.font = '12px "Courier New", monospace';
            ctx.textAlign = 'center';
            ctx.fillText(building.name, x + w / 2, y - 6);
            ctx.restore();
        }

        function drawNPC(ctx, npc) {
            const x = npc.x * TILE_SIZE + TILE_SIZE / 2;
            const y = npc.y * TILE_SIZE + TILE_SIZE / 2;
            const size = TILE_SIZE * 0.8;
            
            const float = Math.sin(gameState.animationFrame * 2 + npc.x * 0.5) * 2;

            // Shadow
            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
            ctx.beginPath();
            ctx.ellipse(x, y + size/2 + 4, size/2 * 0.8, size/4, 0, 0, Math.PI * 2);
            ctx.fill();

            // Body gradient
            const gradient = ctx.createRadialGradient(x, y + float, 0, x, y + float, size/2);
            gradient.addColorStop(0, lightenColor(npc.color, 0.2));
            gradient.addColorStop(1, npc.color);
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(x, y + float, size/2, 0, Math.PI * 2);
            ctx.fill();

            // Glow
            ctx.shadowColor = npc.color;
            ctx.shadowBlur = 15;
            ctx.strokeStyle = '#ffffff';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.arc(x, y + float, size/2, 0, Math.PI * 2);
            ctx.stroke();
            ctx.shadowBlur = 0;

            // Sprite
            ctx.fillStyle = '#ffffff';
            ctx.font = `${size * 0.6}px Arial`;
            ctx.textAlign = 'center';
            ctx.fillText(npc.sprite, x, y + float + size * 0.2);

            // Name
            ctx.save();
            ctx.shadowColor = '#10b981';
            ctx.shadowBlur = 5;
            ctx.fillStyle = '#10b981';
            ctx.font = '10px "Courier New", monospace';
            ctx.textAlign = 'center';
            ctx.fillText(npc.name, x, y + float - size/2 - 6);
            ctx.restore();

            // Interaction indicator
            const pulse = Math.sin(gameState.animationFrame * 4) * 0.5 + 0.5;
            ctx.fillStyle = getNPCTypeColor(npc.type);
            ctx.globalAlpha = 0.7 + pulse * 0.3;
            ctx.beginPath();
            ctx.arc(x + size/2 - 4, y + float - size/2 + 4, 4 + pulse * 2, 0, Math.PI * 2);
            ctx.fill();
            ctx.globalAlpha = 1;
        }

        function drawPlayer(ctx, player, isCurrentPlayer) {
            const size = TILE_SIZE * 0.85;
            const bob = player.isMoving ? Math.sin(gameState.animationFrame * 8) * 2 : 0;
            
            // Use display position for smooth interpolation (other players) or actual position (current player)
            const displayX = isCurrentPlayer ? player.x : (player.displayX || player.x);
            const displayY = isCurrentPlayer ? player.y : (player.displayY || player.y);

            // Shadow
            ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';
            ctx.beginPath();
            ctx.ellipse(displayX, displayY + size/2 + 6, size/2 * 0.8, size/4, 0, 0, Math.PI * 2);
            ctx.fill();

            // Glow for current player
            if (isCurrentPlayer) {
                const pulse = Math.sin(gameState.animationFrame * 2) * 0.3 + 0.7;
                ctx.shadowColor = player.color;
                ctx.shadowBlur = 25 * pulse;
            }

            // Body gradient
            const gradient = ctx.createRadialGradient(
                displayX, displayY + bob, 0,
                displayX, displayY + bob, size/2
            );
            gradient.addColorStop(0, lightenColor(player.color, 0.3));
            gradient.addColorStop(1, player.color);
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(displayX, displayY + bob, size/2, 0, Math.PI * 2);
            ctx.fill();
            ctx.shadowBlur = 0;

            // Border
            ctx.strokeStyle = isCurrentPlayer ? '#10b981' : 'rgba(255, 255, 255, 0.8)';
            ctx.lineWidth = isCurrentPlayer ? 3 : 2;
            ctx.beginPath();
            ctx.arc(displayX, displayY + bob, size/2, 0, Math.PI * 2);
            ctx.stroke();

            // Class icon
            ctx.fillStyle = '#ffffff';
            ctx.font = `${size * 0.6}px Arial`;
            ctx.textAlign = 'center';
            ctx.fillText(getClassIcon(player.class), displayX, displayY + bob + size * 0.2);

            // Name
            ctx.save();
            ctx.shadowColor = isCurrentPlayer ? '#10b981' : 'rgba(255, 255, 255, 0.5)';
            ctx.shadowBlur = 5;
            ctx.fillStyle = isCurrentPlayer ? '#10b981' : '#ffffff';
            ctx.font = '10px "Courier New", monospace';
            ctx.textAlign = 'center';
            ctx.fillText(player.name, displayX, displayY + bob - size/2 - 6);
            ctx.restore();

            // Health bar for current player
            if (isCurrentPlayer) {
                const barWidth = size;
                const barHeight = 4;
                const barY = displayY + bob + size/2 + 10;
                
                ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
                ctx.fillRect(displayX - barWidth/2, barY, barWidth, barHeight);
                
                const healthPercent = player.health / player.maxHealth;
                const healthColor = healthPercent > 0.5 ? '#10b981' : 
                                   healthPercent > 0.25 ? '#fbbf24' : '#ef4444';
                ctx.fillStyle = healthColor;
                ctx.fillRect(displayX - barWidth/2, barY, barWidth * healthPercent, barHeight);
            }
        }

        function getBuildingColor(type) {
            switch (type) {
                case 'shop': return '#dc2626';
                case 'market': return '#059669';
                case 'salon': return '#ec4899';
                case 'arena': return '#f59e0b';
                case 'tavern': return '#92400e';
                case 'guild': return '#7c3aed';
                case 'bank': return '#1f2937';
                default: return '#6b7280';
            }
        }

        function getNPCTypeColor(type) {
            switch (type) {
                case 'shopkeeper': return '#fbbf24';
                case 'vendor': return '#10b981';
                case 'trainer': return '#f59e0b';
                case 'questgiver': return '#3b82f6';
                case 'guard': return '#ef4444';
                default: return '#6b7280';
            }
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Character selection
            let selectedClass = 'warrior';
            
            document.querySelectorAll('.class-button').forEach(button => {
                button.addEventListener('click', function() {
                    document.querySelectorAll('.class-button').forEach(b => b.classList.remove('selected'));
                    this.classList.add('selected');
                    selectedClass = this.dataset.class;
                });
            });
            
            // Default selection
            document.querySelector('.class-button[data-class="warrior"]').classList.add('selected');

            document.getElementById('startGame').addEventListener('click', function() {
                const playerName = document.getElementById('playerName').value.trim();
                if (playerName) {
                    initializePlayer(playerName, selectedClass);
                } else {
                    alert('Please enter your name!');
                }
            });

            // Keyboard controls
            document.addEventListener('keydown', function(e) {
                const key = e.key.toLowerCase();
                if (['w', 'a', 's', 'd', 'arrowup', 'arrowdown', 'arrowleft', 'arrowright'].includes(key)) {
                    e.preventDefault();
                    gameState.keys[key] = true;
                } else if (key === 'e' || key === ' ') {
                    if (document.activeElement?.tagName !== 'INPUT') {
                        e.preventDefault();
                        handleInteraction();
                    }
                } else if (key === 'enter') {
                    if (document.activeElement === document.getElementById('chatInput')) {
                        e.preventDefault();
                        handleSendMessage();
                    }
                }
            });

            document.addEventListener('keyup', function(e) {
                const key = e.key.toLowerCase();
                gameState.keys[key] = false;
            });

            // Chat functionality
            document.getElementById('sendButton').addEventListener('click', handleSendMessage);
            document.getElementById('chatExpandBtn').addEventListener('click', toggleChatExpansion);
            document.getElementById('closeControlsBtn').addEventListener('click', closeControlsPanel);
            
            function handleSendMessage() {
                const chatInput = document.getElementById('chatInput');
                const message = chatInput.value.trim();
                if (message) {
                    sendMessage(message);
                    chatInput.value = '';
                }
            }

            function toggleChatExpansion() {
                const chatPanel = document.getElementById('chatPanel');
                const expandBtn = document.getElementById('chatExpandBtn');
                
                chatPanel.classList.toggle('expanded');
                expandBtn.textContent = chatPanel.classList.contains('expanded') ? '⇲' : '⇱';
            }

            function closeControlsPanel() {
                document.getElementById('controlsPanel').classList.add('hidden');
            }

            function handleInteraction() {
                if (!gameState.currentPlayer) return;
                
                const interaction = checkInteractions(gameState.currentPlayer.x, gameState.currentPlayer.y);
                if (interaction?.type === 'npc') {
                    showInteractionDialog(interaction.target);
                }
            }

            // Interaction dialog
            document.getElementById('closeDialog').addEventListener('click', closeInteractionDialog);
            document.getElementById('interactionOverlay').addEventListener('click', closeInteractionDialog);

            // Global purchase function
            window.purchaseItem = purchaseItem;

            // Cleanup on page unload
            window.addEventListener('beforeunload', async function() {
                if (gameState.currentPlayer?.id) {
                    try {
                        await supabase
                            .from('players')
                            .delete()
                            .eq('id', gameState.currentPlayer.id);
                    } catch (error) {
                        console.error('Error cleaning up player:', error);
                    }
                }
            });
        });
    </script>

<!-- Extended NPC Dialog for Shops, Vault, and Bank -->
<div id="npcDialog" class="interaction-dialog hidden">
  <h2 id="npcName" class="neon-text"></h2>
  <p id="npcDialogue"></p>
  <div id="npcContent"></div>
  <div style="text-align:right;margin-top:16px;">
    <button onclick="closeNPCDialog()">Close</button>
  </div>
</div>

<script>
const NPCS = {
  "shop": {
    name: "Generic Shop",
    dialogue: "Welcome to my shop!",
    items: [
      { name: "Health Potion", price: 10 },
      { name: "Mana Potion", price: 15 }
    ],
    render: (npc) => {
      let html = '<div class="shop-items">';
      npc.items.forEach(item => {
        html += `<div class='shop-item'>${item.name} - ${item.price}g <button>Buy</button></div>`;
      });
      html += '</div>';
      return html;
    }
  },
  "vault": {
    name: "Vault Keeper Ironlock",
    dialogue: "I will guard your belongings.",
    render: (npc) => {
      return `<div class="shop-items"><div class='shop-item'>Extra Inventory Slot <button>Store</button> <button>Withdraw</button></div></div>`;
    }
  },
  "bank": {
    name: "Banker Gold Tooth",
    dialogue: "Your gold is safe with me.",
    balance: 100,
    render: (npc) => {
      return `<div class='shop-item'>Gold in account: ${npc.balance}g <br><button>Deposit</button> <button>Withdraw</button></div>`;
    }
  }
};

function openNPCDialog(type, building) {
  let npc;
  if (type && NPCS[type]) {
    npc = NPCS[type];
  } else {
    npc = { name: building.name, dialogue: building.description, render: () => '' };
  }
  document.getElementById("npcName").innerText = npc.name;
  document.getElementById("npcDialogue").innerText = npc.dialogue;
  document.getElementById("npcContent").innerHTML = npc.render(npc);
  document.getElementById("npcDialog").classList.remove("hidden");
}

function closeNPCDialog() {
  document.getElementById("npcDialog").classList.add("hidden");
}

// Hook into interaction logic
const originalInteraction = window.startInteractionWithNPC;
window.startInteractionWithNPC = function(building) {
  if (!building) return;
  if (building.type === 'shop') {
    openNPCDialog('shop', building);
  } else if (building.type === 'bank') {
    openNPCDialog('bank', building);
  } else if (building.type === 'vault') {
    openNPCDialog('vault', building);
  } else {
    openNPCDialog(null, building);
  }
};
</script>

</body>
</html>
